{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","node_modules/clusterfck/lib/clusterfck.js","compass.js","node_modules/clusterfck/lib/distance.js","node_modules/clusterfck/lib/hcluster.js","node_modules/clusterfck/lib/kmeans.js","src/cluster/cluster.js","src/cluster/clusterconsts.js","src/cluster/distance.js","src/consts.js","src/cp","src/gen/aggregates.js","src/gen/encodings.js","src/gen/encs.js","src/gen/gen.js","src/gen/marktypes.js","src/gen/projections.js","src/globals.js","src/rank/rank.js","src/rank/rankEncodings.js","src/util.js","../vega-lite/src/globals.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","cp","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"hcluster","Kmeans","kmeans","./hcluster","./kmeans",2,"euclidean","v1","v2","total","Math","pow","sqrt","manhattan","abs","max",3,"distances","HierarchicalClustering","distance","linkage","threshold","undefined","Infinity","prototype","cluster","items","snapshotPeriod","snapshotCb","clusters","dists","mins","index","value","key","size","j","dist","merged","mergeClosest","forEach","minKey","min","c1","c2","left","right","splice","ci","key1","key2","snapshot","snapshotCallback","./distance",4,"KMeans","centroids","randomCentroids","points","k","slice","sort","round","random","classify","point","ceil","assignment","Array","iterations","movement","assigned","push","centroid","newCentroid","sum","toJSON","JSON","stringify","fromJSON","json","parse","vectors",5,"encodings","opt","table","clusterTrees","clusterfck","e1","e2","s1","vl","Encoding","shorthand","s2","consts","CLUSTER_THRESHOLD","map","tree","util","traverse","encoding1","encoding2","_info","score","filter","cluster1","cluster2","../util","./clusterconsts",6,"reduceTupleToTable","x","b","d","c","SWAPPABLE","DIST_MISSING","DIST_BY_ENCTYPE","reduce",7,"len","colencs","getEncTypeByColumnName","shorthands","diff","sj","si","get","colenc1","colenc2","cols","union","keys","col","encType","isStack1","isStack","isStack2","encoding","color","name","_colenc","enc","duplicate","marktype",8,"gen","rank","projections","type","properties","omitDotPlot","default","description","maxCardinalityForAutoAddOrdinal","alwaysAddHistogram","aggregates","config","data","tableTypes","enum","genDimQ","minCardinalityForBin","omitMeasureOnly","omitDimensionOnly","addCountForDimensionOnly","aggrList","timeUnitList","consistentAutoQ","marktypeList","encodingTypeList","maxGoodCardinalityForFacets","maxCardinalityForFacets","maxGoodCardinalityForColor","maxCardinalityForColor","maxCardinalityForShape","omitTranpose","omitDotPlotWithExtraEncoding","omitMultipleRetinalEncodings","omitNonTextAggrWithAllDimsOnFacets","omitOneDimensionCount","omitSizeOnBar","omitStackedAverage","alwaysGenerateTableAsHeatmap",9,"auto","./cluster/cluster","./consts","./gen/gen","./rank/rank","./util",10,"genAggregates","output","fields","stats","emit","fieldSet","field","checkAndPush","hasMeasure","hasDimension","hasRaw","tf","isDimension","aggregate","count","pop","assignAggrQ","hasAggr","autoMode","canHaveAggr","cantHaveAggr","assignField","assignBinQ","bin","assignQ","_aggregate","_raw","_bin","AUTO","isin","hasNorO","highCardinality","cardinality","isAuto","genBin","genCast","assignTimeUnitT","timeUnit","assignT","_timeUnit","Q","T","O","N","schema","extend","any","isTypes","../consts",11,"genEncodingsFromFields","nested","encs","genEncs","dict","genEncodingsFromEncs","list","getMarktypes","markType","finalTouch","text","et","isMeasure","isCount","stat","stdev","avg","scale","zero","../rank/rank","./encs","./marktypes",12,"retinalEncRules","shape","colorRules","shapeRules","dimMeaTransposeRule","y","generalRules","genMarkTypes","satisfyRules","TEXT","geo","arc","row","isAggrWithAllDimOnFacets","isDimX","isDimY","isAggregate","tmpEnc","isDim","rules","dimension","measure","multiple","detail","hasOtherO","ROW","COL","../globals",13,"marktypes","charts","cfg","flat","getOpt","fieldSets","genAggr","level","nestedReduce","nestedMap","./aggregates","./encodings","./projections",14,"markTypes","vlmarktypes","facetRule","facetsRule","pointRule","xIsDim","yIsDim","tickRule","isOrdinalScale","barRule","aggEitherXorY","eitherXorYisDimOrNull","lineRule","areaRule","textRule","marksRule","rule","bar","line","area","tick","mark","compiler","marks","reqs","requiredEncoding","support","supportedEncoding",15,"selected","fieldsToAdd","hasSelectedDimension","hasSelectedMeasure","indices","compareFieldsToAdd","setsToAdd","chooseKorLess","setToAdd","concat","typeIsMeasureScore","projection","join",16,"CHART_TYPES","TABLE","BAR","PLOT","LINE","AREA","MAP","HISTOGRAM","ANY_DATA_TYPES","vega-lite/src/globals",17,"./rankEncodings",18,"rankEncodings","features","encTypes","encodingMappingByField","mappings","reasons","m","assign","scores","role","reason","apply","UNUSED_POSITION","MARK_SCORE","p","circle","square","D","M","BAD","TERRIBLE","minor","pos","Y_T","facet_text","facet_good","facet_ok","facet_bad","color_good","color_ok","color_bad","color_stack","bad","terrible","dimensionScore","X","Y","COLOR","hasOrder","isStacked","SHAPE","DETAIL","measureScore","SIZE",19,"isArray","obj","toString","sp","v","nonEmpty","grp","node","arr","Object","create","DEFAULT_OPT","powerset","ps","subset","sub","chooseK","kArray","cross",20,"RAW","STACKED","INDEX"],"mappings":"CAAA,SAAAA,GAAA,GAAA,gBAAAC,UAAA,mBAAAC,QAAAA,OAAAD,QAAAD,QAAA,IAAA,kBAAAG,SAAAA,OAAAC,IAAAD,UAAAH,OAAA,CAAA,GAAAK,EAAAA,GAAA,mBAAAC,QAAAA,OAAA,mBAAAC,QAAAA,OAAA,mBAAAC,MAAAA,KAAAC,KAAAJ,EAAAK,GAAAV,MAAA,WAAA,MAAA,SAAAW,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAhB,GAAA,GAAAqB,OAAA,uBAAAL,EAAA,IAAA,MAAAhB,GAAAsB,KAAA,mBAAAtB,EAAA,GAAAuB,GAAAV,EAAAG,IAAAf,WAAAW,GAAAI,GAAA,GAAAQ,KAAAD,EAAAtB,QAAA,SAAAU,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAY,EAAAA,EAAAtB,QAAAU,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAf,QAAA,IAAA,GAAAmB,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAW,GAAA,SAAAP,EAAAjB,EAAAD,GCAAC,EAAAD,SACA0B,SAAAR,EAAA,cACAS,OAAAT,EAAA,YACAU,OAAAV,EAAA,YAAAU,UCGGC,aAAa,EAAEC,WAAW,IAAIC,GAAG,SAASb,EAAQjB,EAAOD,GCN5DC,EAAAD,SACAgC,UAAA,SAAAC,EAAAC,GAEA,IAAA,GADAC,GAAA,EACAhB,EAAA,EAAAA,EAAAc,EAAAT,OAAAL,IACAgB,GAAAC,KAAAC,IAAAH,EAAAf,GAAAc,EAAAd,GAAA,EAEA,OAAAiB,MAAAE,KAAAH,IAEAI,UAAA,SAAAN,EAAAC,GAEA,IAAA,GADAC,GAAA,EACAhB,EAAA,EAAAA,EAAAc,EAAAT,OAAAL,IACAgB,GAAAC,KAAAI,IAAAN,EAAAf,GAAAc,EAAAd,GAEA,OAAAgB,IAEAM,IAAA,SAAAR,EAAAC,GAEA,IAAA,GADAO,GAAA,EACAtB,EAAA,EAAAA,EAAAc,EAAAT,OAAAL,IACAsB,EAAAL,KAAAK,IAAAA,EAAAL,KAAAI,IAAAN,EAAAf,GAAAc,EAAAd,IAEA,OAAAsB,UDUMC,GAAG,SAASxB,EAAQjB,EAAOD,GE9BjC,GAAA2C,GAAAzB,EAAA,cAEA0B,EAAA,SAAAC,EAAAC,EAAAC,GACAvC,KAAAqC,SAAAA,EACArC,KAAAsC,QAAAA,EACAtC,KAAAuC,UAAAC,QAAAD,EAAAE,EAAAA,EAAAF,EAGAH,GAAAM,WACAC,QAAA,SAAAC,EAAAC,EAAAC,GACA9C,KAAA+C,YACA/C,KAAAgD,SACAhD,KAAAiD,QACAjD,KAAAkD,QAEA,KAAA,GAAAvC,GAAA,EAAAA,EAAAiC,EAAA5B,OAAAL,IAAA,CACA,GAAAgC,IACAQ,MAAAP,EAAAjC,GACAyC,IAAAzC,EACAuC,MAAAvC,EACA0C,KAAA,EAEArD,MAAA+C,SAAApC,GAAAgC,EACA3C,KAAAkD,MAAAvC,GAAAgC,EACA3C,KAAAgD,MAAArC,MACAX,KAAAiD,KAAAtC,GAAA,EAGA,IAAA,GAAAA,GAAA,EAAAA,EAAAX,KAAA+C,SAAA/B,OAAAL,IACA,IAAA,GAAA2C,GAAA,EAAA3C,GAAA2C,EAAAA,IAAA,CACA,GAAAC,GAAA5C,GAAA2C,EAAAb,EAAAA,EACAzC,KAAAqC,SAAArC,KAAA+C,SAAApC,GAAAwC,MAAAnD,KAAA+C,SAAAO,GAAAH,MACAnD,MAAAgD,MAAArC,GAAA2C,GAAAC,EACAvD,KAAAgD,MAAAM,GAAA3C,GAAA4C,EAEAA,EAAAvD,KAAAgD,MAAArC,GAAAX,KAAAiD,KAAAtC,MACAX,KAAAiD,KAAAtC,GAAA2C,GAOA,IAFA,GAAAE,GAAAxD,KAAAyD,eACA9C,EAAA,EACA6C,GACAV,GAAAnC,IAAAkC,GAAA,GACAC,EAAA9C,KAAA+C,UAEAS,EAAAxD,KAAAyD,cASA,OANAzD,MAAA+C,SAAAW,QAAA,SAAAf,SAEAA,GAAAS,UACAT,GAAAO,QAGAlD,KAAA+C,UAGAU,aAAA,WAGA,IAAA,GADAE,GAAA,EAAAC,EAAAnB,EAAAA,EACA9B,EAAA,EAAAA,EAAAX,KAAA+C,SAAA/B,OAAAL,IAAA,CACA,GAAAyC,GAAApD,KAAA+C,SAAApC,GAAAyC,IACAG,EAAAvD,KAAAgD,MAAAI,GAAApD,KAAAiD,KAAAG,GACAQ,GAAAL,IACAI,EAAAP,EACAQ,EAAAL,GAGA,GAAAK,GAAA5D,KAAAuC,UACA,OAAA,CAGA,IAAAsB,GAAA7D,KAAAkD,MAAAS,GACAG,EAAA9D,KAAAkD,MAAAlD,KAAAiD,KAAAU,IAGAH,GACAO,KAAAF,EACAG,MAAAF,EACAV,IAAAS,EAAAT,IACAC,KAAAQ,EAAAR,KAAAS,EAAAT,KAGArD,MAAA+C,SAAAc,EAAAX,OAAAM,EACAxD,KAAA+C,SAAAkB,OAAAH,EAAAZ,MAAA,GACAlD,KAAAkD,MAAAW,EAAAT,KAAAI,CAGA,KAAA,GAAA7C,GAAA,EAAAA,EAAAX,KAAA+C,SAAA/B,OAAAL,IAAA,CACA,GACA4C,GADAW,EAAAlE,KAAA+C,SAAApC,EAEAkD,GAAAT,KAAAc,EAAAd,IACAG,EAAAd,EAAAA,EAEA,UAAAzC,KAAAsC,SACAiB,EAAAvD,KAAAgD,MAAAa,EAAAT,KAAAc,EAAAd,KACApD,KAAAgD,MAAAa,EAAAT,KAAAc,EAAAd,KAAApD,KAAAgD,MAAAc,EAAAV,KAAAc,EAAAd,OACAG,EAAAvD,KAAAgD,MAAAc,EAAAV,KAAAc,EAAAd,OAGA,YAAApD,KAAAsC,SACAiB,EAAAvD,KAAAgD,MAAAa,EAAAT,KAAAc,EAAAd,KACApD,KAAAgD,MAAAa,EAAAT,KAAAc,EAAAd,KAAApD,KAAAgD,MAAAc,EAAAV,KAAAc,EAAAd,OACAG,EAAAvD,KAAAgD,MAAAc,EAAAV,KAAAc,EAAAd,OAIAG,EADA,WAAAvD,KAAAsC,SACAtC,KAAAgD,MAAAa,EAAAT,KAAAc,EAAAd,KAAAS,EAAAR,KACArD,KAAAgD,MAAAc,EAAAV,KAAAc,EAAAd,KAAAU,EAAAT,OAAAQ,EAAAR,KAAAS,EAAAT,MAGArD,KAAAqC,SAAA6B,EAAAf,MAAAU,EAAAV,OAGAnD,KAAAgD,MAAAa,EAAAT,KAAAc,EAAAd,KAAApD,KAAAgD,MAAAkB,EAAAd,KAAAS,EAAAT,KAAAG,EAKA,IAAA,GAAA5C,GAAA,EAAAA,EAAAX,KAAA+C,SAAA/B,OAAAL,IAAA,CACA,GAAAwD,GAAAnE,KAAA+C,SAAApC,GAAAyC,GACA,IAAApD,KAAAiD,KAAAkB,IAAAN,EAAAT,KAAApD,KAAAiD,KAAAkB,IAAAL,EAAAV,IAAA,CAEA,IAAA,GADAQ,GAAAO,EACAb,EAAA,EAAAA,EAAAtD,KAAA+C,SAAA/B,OAAAsC,IAAA,CACA,GAAAc,GAAApE,KAAA+C,SAAAO,GAAAF,GACApD,MAAAgD,MAAAmB,GAAAC,GAAApE,KAAAgD,MAAAmB,GAAAP,KACAA,EAAAQ,GAGApE,KAAAiD,KAAAkB,GAAAP,EAEA5D,KAAA+C,SAAApC,GAAAuC,MAAAvC,EAOA,aAHAkD,GAAAT,UAAAU,GAAAV,UACAS,GAAAX,YAAAY,GAAAZ,OAEA,GAIA,IAAAhC,GAAA,SAAA0B,EAAAP,EAAAC,EAAAC,EAAA8B,EAAAC,GACAjC,EAAAA,GAAA,YACAC,EAAAA,GAAA,UAEA,gBAAAD,KACAA,EAAAF,EAAAE,GAEA,IAAAU,GAAA,GAAAX,GAAAC,EAAAC,EAAAC,GACAI,QAAAC,EAAAyB,EAAAC,EAEA,OAAA9B,UAAAD,EACAQ,EAAA,GAEAA,EAGAtD,GAAAD,QAAA0B,IFiCGqD,aAAa,IAAIC,GAAG,SAAS9D,EAAQjB,EAAOD,GG/L/C,QAAAiF,GAAAC,GACA1E,KAAA0E,UAAAA,MAHA,GAAAvC,GAAAzB,EAAA,aAMA+D,GAAA/B,UAAAiC,gBAAA,SAAAC,EAAAC,GACA,GAAAH,GAAAE,EAAAE,MAAA,EAIA,OAHAJ,GAAAK,KAAA,WACA,MAAAnD,MAAAoD,MAAApD,KAAAqD,UAAA,KAEAP,EAAAI,MAAA,EAAAD,IAGAJ,EAAA/B,UAAAwC,SAAA,SAAAC,EAAA9C,GACA,GAAAuB,GAAAnB,EAAAA,EACAS,EAAA,CAEAb,GAAAA,GAAA,YACA,gBAAAA,KACAA,EAAAF,EAAAE,GAGA,KAAA,GAAA1B,GAAA,EAAAA,EAAAX,KAAA0E,UAAA1D,OAAAL,IAAA,CACA,GAAA4C,GAAAlB,EAAA8C,EAAAnF,KAAA0E,UAAA/D,GACAiD,GAAAL,IACAK,EAAAL,EACAL,EAAAvC,GAIA,MAAAuC,IAGAuB,EAAA/B,UAAAC,QAAA,SAAAiC,EAAAC,EAAAxC,EAAAQ,EAAAC,GACA+B,EAAAA,GAAAjD,KAAAK,IAAA,EAAAL,KAAAwD,KAAAxD,KAAAE,KAAA8C,EAAA5D,OAAA,KAEAqB,EAAAA,GAAA,YACA,gBAAAA,KACAA,EAAAF,EAAAE,IAGArC,KAAA0E,UAAA1E,KAAA2E,gBAAAC,EAAAC,EAOA,KALA,GAAAQ,GAAA,GAAAC,OAAAV,EAAA5D,QACA+B,EAAA,GAAAuC,OAAAT,GAEAU,EAAA,EACAC,GAAA,EACAA,GAAA,CAEA,IAAA,GAAA7E,GAAA,EAAAA,EAAAiE,EAAA5D,OAAAL,IACA0E,EAAA1E,GAAAX,KAAAkF,SAAAN,EAAAjE,GAAA0B,EAIAmD,IAAA,CACA,KAAA,GAAAlC,GAAA,EAAAuB,EAAAvB,EAAAA,IAAA,CAEA,IAAA,GADAmC,MACA9E,EAAA,EAAAA,EAAA0E,EAAArE,OAAAL,IACA0E,EAAA1E,IAAA2C,GACAmC,EAAAC,KAAAd,EAAAjE,GAIA,IAAA8E,EAAAzE,OAAA,CAOA,IAAA,GAHA2E,GAAA3F,KAAA0E,UAAApB,GACAsC,EAAA,GAAAN,OAAAK,EAAA3E,QAEApB,EAAA,EAAAA,EAAA+F,EAAA3E,OAAApB,IAAA,CAEA,IAAA,GADAiG,GAAA,EACAlF,EAAA,EAAAA,EAAA8E,EAAAzE,OAAAL,IACAkF,GAAAJ,EAAA9E,GAAAf,EAEAgG,GAAAhG,GAAAiG,EAAAJ,EAAAzE,OAEA4E,EAAAhG,IAAA+F,EAAA/F,KACA4F,GAAA,GAIAxF,KAAA0E,UAAApB,GAAAsC,EACA7C,EAAAO,GAAAmC,GAGA3C,GAAAyC,IAAA1C,GAAA,GACAC,EAAAC,GAIA,MAAAA,IAGA0B,EAAA/B,UAAAoD,OAAA,WACA,MAAAC,MAAAC,UAAAhG,KAAA0E,YAGAD,EAAA/B,UAAAuD,SAAA,SAAAC,GAEA,MADAlG,MAAA0E,UAAAqB,KAAAI,MAAAD,GACAlG,MAGAP,EAAAD,QAAAiF,EAEAhF,EAAAD,QAAA4B,OAAA,SAAAgF,EAAAvB,GACA,OAAA,GAAAJ,IAAA9B,QAAAyD,EAAAvB,MHoMGN,aAAa,IAAI8B,GAAG,SAAS3F,EAAQjB,EAAOD,IAC/C,SAAWM,GIjTX,YAWA,SAAA6C,GAAA2D,EAAAC,GAEA,GAAAhD,GAAAZ,EAAAN,SAAAmE,MAAAF,GAEAG,EAAAC,EAAAxF,SAAAoF,EAAA,SAAAK,EAAAC,GACA,GAAAC,GAAAC,EAAAC,SAAAC,UAAAL,GACAM,EAAAH,EAAAC,SAAAC,UAAAJ,EACA,OAAArD,GAAAsD,GAAAI,IACA,UAAAC,EAAAC,mBAEApE,EAAA0D,EAAAW,IAAA,SAAAC,GACA,MAAAC,GAAAC,SAAAF,QAEAD,IAAA,SAAAzE,GACA,MAAAA,GAAAoC,KAAA,SAAAyC,EAAAC,GAEA,MAAAA,GAAAC,MAAAC,MAAAH,EAAAE,MAAAC,UAEAC,OAAA,SAAAjF,GACA,MAAAA,GAAA3B,OAAA,IACA+D,KAAA,SAAA8C,EAAAC,GAEA,MAAAA,GAAA,GAAAJ,MAAAC,MAAAE,EAAA,GAAAH,MAAAC,OAKA,OAFA5E,GAAAQ,KAAAA,EAEAR,EApCAtD,EAAAD,QAAAmD,CAEA,IAAAmE,GAAA,mBAAAjH,QAAAA,OAAA,GAAA,mBAAAC,GAAAA,EAAA,GAAA,KACA4G,EAAAhG,EAAA,cACAwG,EAAAxG,EAAA,mBACA4G,EAAA5G,EAAA,UAEAiC,GAAAN,SAAA3B,EAAA,gBJiVGK,KAAKf,KAAuB,mBAAXF,QAAyBA,OAAyB,mBAATC,MAAuBA,KAAyB,mBAAXF,QAAyBA,aAExHkI,UAAU,GAAGC,kBAAkB,EAAEzD,aAAa,EAAEmC,WAAa,IAAIuB,GAAG,SAASvH,EAAQjB,EAAOD,GK5V/F,YAQA,SAAA0I,GAAA7H,EAAA8H,GACA,GAAA1H,GAAA0H,EAAA,GAAAC,EAAAD,EAAA,GAAAE,EAAAF,EAAA,EAIA,OAHA9H,GAAAI,GAAAJ,EAAAI,OACAJ,EAAA+H,GAAA/H,EAAA+H,OACA/H,EAAAI,GAAA2H,GAAA/H,EAAA+H,GAAA3H,GAAA4H,EACAhI,EAXA,GAAAiI,GAAA7I,EAAAD,UAEA8I,GAAAC,UAAA,IACAD,EAAAE,aAAA,EACAF,EAAAnB,kBAAA,EAUAmB,EAAAG,kBAEA,IAAA,IAAAH,EAAAC,YACA,MAAA,MAAAD,EAAAC,YAGA,QAAA,QAAAD,EAAAC,YACA,QAAA,SAAAD,EAAAC,YACA,SAAA,QAAAD,EAAAC,YAGA,OAAA,QAAAD,EAAAC,YACAG,OAAAR,WL+VMS,GAAG,SAASjI,EAAQjB,EAAOD,IACjC,SAAWM,GM5XX,YAEA,IAAAgH,GAAA,mBAAAjH,QAAAA,OAAA,GAAA,mBAAAC,GAAAA,EAAA,GAAA,KACAoH,EAAAxG,EAAA,mBACA4G,EAAA5G,EAAA,WAEA2B,IACA5C,GAAAD,QAAA6C,EAEAA,EAAAmE,MAAA,SAAAF,GACA,GAGA3F,GAAA2C,EAHAsF,EAAAtC,EAAAtF,OACA6H,EAAAvC,EAAAc,IAAA,SAAAlH,GAAA,MAAAmC,GAAAyG,uBAAA5I,KACA6I,EAAAzC,EAAAc,IAAAN,EAAAC,SAAAC,WACAgC,IAEA,KAAArI,EAAA,EAAAiI,EAAAjI,EAAAA,IAAAqI,EAAAD,EAAApI,MAEA,KAAAA,EAAA,EAAAiI,EAAAjI,EAAAA,IACA,IAAA2C,EAAA3C,EAAA,EAAAiI,EAAAtF,EAAAA,IAAA,CACA,GAAA2F,GAAAF,EAAAzF,GAAA4F,EAAAH,EAAApI,EAEAqI,GAAAC,GAAAC,GAAAF,EAAAE,GAAAD,GAAA5G,EAAA8G,IAAAN,EAAAlI,GAAAkI,EAAAvF,IAGA,MAAA0F,IAGA3G,EAAA8G,IAAA,SAAAC,EAAAC,GACA,GAAAC,GAAAhC,EAAAiC,MAAAzC,EAAA0C,KAAAJ,EAAAK,KAAA3C,EAAA0C,KAAAH,EAAAI,MACAlG,EAAA,CAEA+F,GAAA5F,QAAA,SAAA+F,GACA,GAAA9C,GAAAyC,EAAAK,IAAAA,GAAA7C,EAAAyC,EAAAI,IAAAA,EAEA9C,IAAAC,EACAD,EAAA+C,SAAA9C,EAAA8C,UACAnG,IAAA2D,EAAAuB,gBAAA9B,EAAA+C,cAAA9C,EAAA8C,UAAA,GAGAnG,GAAA2D,EAAAsB,cAKA,IAAAmB,GAAA7C,EAAAC,SAAA6C,QAAAR,GACAS,EAAA/C,EAAAC,SAAA6C,QAAAP,EAWA,QATAM,GAAAE,KACAF,GAAAE,EACAT,EAAAU,SAAAC,MAAAC,OAAAX,EAAAS,SAAAC,MAAAC,OACAzG,GAAA,GAGAA,GAAA,GAGAA,GAIAlB,EAAAyG,uBAAA,SAAAgB,GACA,GAAAG,MACAC,EAAAJ,EAAAA,QASA,OAPAhD,GAAA0C,KAAAU,GAAAxG,QAAA,SAAAgG,GACA,GAAAxJ,GAAA4G,EAAAqD,UAAAD,EAAAR,GACAxJ,GAAAwJ,QAAAA,EACAO,EAAA/J,EAAA8J,MAAA,IAAA9J,QACAA,GAAA8J,QAIAI,SAAAN,EAAAM,SACAX,IAAAQ,EACAH,SAAAA,EAAAA,aNgYG/I,KAAKf,KAAuB,mBAAXF,QAAyBA,OAAyB,mBAATC,MAAuBA,KAAyB,mBAAXF,QAAyBA,aAExHkI,UAAU,GAAGC,kBAAkB,IAAIqC,GAAG,SAAS3J,EAAQjB,EAAOD,GO5cjE,YAEA,IAAA0H,GAAAzH,EAAAD,SACA8K,OACA3H,WACA4H,QAGArD,GAAAoD,IAAAE,aACAC,KAAA,SACAC,YACAC,aACAF,KAAA,UACAG,WAAA,EACAC,YAAA,wBAEAC,iCACAL,KAAA,UACAG,UAAA,GACAC,YAAA,sEAEAE,oBACAN,KAAA,UACAG,WAAA,KAKA1D,EAAAoD,IAAAU,YACAP,KAAA,SACAC,YACAO,QACAR,KAAA,UAEAS,MACAT,KAAA,UAEAU,YACAV,KAAA,UACAG,UAAA,OACAQ,QAAA,OAAA,aAAA,kBAEAC,SACAZ,KAAA,SACAG,UAAA,OACAQ,QAAA,OAAA,MAAA,OAAA,QACAP,YAAA,mDAEAS,sBACAb,KAAA,UACAG,UAAA,GACAC,YAAA,oDAEAF,aACAF,KAAA,UACAG,WAAA,EACAC,YAAA,wBAEAU,iBACAd,KAAA,UACAG,WAAA,EACAC,YAAA,yCAEAW,mBACAf,KAAA,UACAG,WAAA,EACAC,YAAA,2CAEAY,0BACAhB,KAAA,UACAG,WAAA,EACAC,YAAA,8CAEAa,UACAjB,KAAA,QACA7H,OACA6H,MAAA,WAEAG,WAAApI,OAAA,QAEAmJ,cACAlB,KAAA,QACA7H,OACA6H,MAAA,WAEAG,WAAA,SAEAgB,iBACAnB,KAAA,UACAG,WAAA,EACAC,YAAA,+CAKA3D,EAAAoD,IAAAhE,WACAmE,KAAA,SACAC,YACAmB,cACApB,KAAA,QACA7H,OAAA6H,KAAA,UACAG,WAAA,QAAA,MAAA,OAAA,OAAA,OAAA,QACAC,YAAA,qBAEAiB,kBACArB,KAAA,QACA7H,OAAA6H,KAAA,UACAG,WAAA,IAAA,IAAA,MAAA,MAAA,OAAA,QAAA,OAAA,UACAC,YAAA,0BAEAkB,6BACAtB,KAAA,UACAG,UAAA,EACAC,YAAA,2EAEAmB,yBACAvB,KAAA,UACAG,UAAA,GACAC,YAAA,+DAEAoB,4BACAxB,KAAA,UACAG,UAAA,EACAC,YAAA,0EAEAqB,wBACAzB,KAAA,UACAG,UAAA,GACAC,YAAA,8DAEAsB,wBACA1B,KAAA,UACAG,UAAA,EACAC,YAAA,8DAEAuB,cACA3B,KAAA,UACAG,WAAA,EACAC,YAAA,+JAEAF,aACAF,KAAA,UACAG,WAAA,EACAC,YAAA,wBAEAwB,8BACA5B,KAAA,UACAG,WAAA,EACAC,YAAA,yCAEAyB,8BACA7B,KAAA,UACAG,WAAA,EACAC,YAAA,8DAEA0B,oCACA9B,KAAA,UACAG,WAAA,EACAC,YAAA,wFAEA2B,uBACA/B,KAAA,UACAG,WAAA,EACAC,YAAA,4BAEA4B,eACAhC,KAAA,UACAG,WAAA,EACAC,YAAA,yBAEA6B,oBACAjC,KAAA,UACAG,WAAA,EACAC,YAAA,uCAEA8B,8BACAlC,KAAA,UACAG,WAAA,UPqdMgC,GAAG,SAASlM,EAAQjB,EAAOD,GQtoBjCC,EAAAD,SACA0H,OAAAxG,EAAA,YACAiC,QAAAjC,EAAA,qBACA4J,IAAA5J,EAAA,aACA6J,KAAA7J,EAAA,eACA4G,KAAA5G,EAAA,UACAmM,KAAA,YR4oBGC,oBAAoB,EAAEC,WAAW,EAAEC,YAAY,GAAGC,cAAc,GAAGC,SAAS,KAAKC,IAAI,SAASzM,EAAQjB,EAAOD,IAChH,SAAWM,GSnpBX,YAUA,SAAAsN,GAAAC,EAAAC,EAAAC,EAAAhH,GAOA,QAAAiH,GAAAC,GACAA,EAAA3G,EAAAqD,UAAAsD,GACAA,EAAArK,IAAA0D,EAAA4G,MAAA3E,WAAA0E,GACAJ,EAAA3H,KAAA+H,GAGA,QAAAE,KACA,GAAApH,EAAAgF,iBAAAhF,EAAAiF,kBAAA,CACA,GAAAoC,IAAA,EAAAC,GAAA,EAAAC,GAAA,CASA,IARAC,EAAArK,QAAA,SAAAnE,GACAuH,EAAA4G,MAAAM,YAAAzO,GACAsO,GAAA,GAEAD,GAAA,EACArO,EAAA0O,YAAAH,GAAA,OAGAD,IAAAC,GAAAvH,EAAAgF,gBAAA,MACA,KAAAqC,IACArH,EAAAkF,2BACAsC,EAAArI,KAAAoB,EAAA4G,MAAAQ,SACAV,EAAAO,GACAA,EAAAI,OAEA5H,EAAAiF,mBAAA,OAGAjF,EAAAoE,aAAA,IAAAoD,EAAA/M,QACAwM,EAAAO,GAGA,QAAAK,GAAAzN,EAAA0N,EAAAC,EAAA7N,GACA,GAAA8N,GAAAF,KAAA,GAAA,OAAAA,EACAG,EAAAH,KAAA,GAAA,OAAAA,CACA5N,GACA8N,IACAR,EAAApN,GAAAsN,UAAAxN,EACAgO,EAAA9N,EAAA,GAAA,EAAA2N,SACAP,GAAApN,GAAAsN,WAGAO,GACAC,EAAA9N,EAAA,GAAA,EAAA2N,GAKA,QAAAI,GAAA/N,EAAA0N,EAAAC,GACAP,EAAApN,GAAAgO,KAAA,EACAF,EAAA9N,EAAA,EAAA0N,EAAAC,SACAP,GAAApN,GAAAgO,IAGA,QAAAC,GAAAjO,EAAA0N,EAAAC,GACA,GAAA/O,GAAA+N,EAAA3M,GACA4N,EAAAF,KAAA,GAAA,OAAAA,CAIA,IAFAN,EAAApN,IAAAqJ,KAAAzK,EAAAyK,KAAAS,KAAAlL,EAAAkL,MAEA,UAAAlL,EAAA0O,UACAM,IACAR,EAAApN,GAAAsN,UAAA1O,EAAA0O,UACAQ,EAAA9N,EAAA,GAAA,EAAA2N,QAEA,IAAA/O,EAAAsP,WAEAT,EAAAzN,EAAA0N,EAAAC,EAAA/O,EAAAsP,gBACA,IAAAtP,EAAAuP,KACAV,EAAAzN,EAAA0N,EAAAC,EAAA9L,YACA,IAAAjD,EAAAwP,KACAL,EAAA/N,EAAA0N,EAAAC,OAQA,IANA/H,EAAAmF,SAAAhI,QAAA,SAAAjD,GACA8F,EAAAqF,iBAAA0C,IAAAU,GAAAV,IAAA7N,GACA2N,EAAAzN,EAAA0N,EAAA5N,EAAAA,OAIA8F,EAAAqF,iBAAA9E,EAAAmI,KAAAX,GAAAU,EAAA,MAAA,OAAA,gBAAAE,EAAA,CACA,GAAAC,GAAArI,EAAA4G,MAAA0B,YAAA7P,EAAAgO,GAAAhH,EAAA+E,qBAEA+D,EAAA,SAAA9I,EAAA8E,QACAiE,EAAA,QAAA/I,EAAA8E,SAAAgE,GAAAF,EACAI,EAAA,SAAAhJ,EAAA8E,SAAAgE,IAAAF,CAEAG,IAAAxI,EAAAmI,KAAAX,GAAAU,EAAA,MAAA,cACAN,EAAA/N,EAAA0N,EAAAgB,EAAA,WAAA,OAEAE,GAAAzI,EAAAmI,KAAAX,GAAAU,EAAA,OAAA,eACAjB,EAAApN,GAAA8J,KAAA,IACAgE,EAAA9N,EAAA,EAAA0N,EAAAgB,EAAA,WAAA,QACAtB,EAAApN,GAAA8J,KAAA,MAMA,QAAA+E,GAAA7O,EAAA0N,EAAAC,EAAAmB,GACA1B,EAAApN,GAAA8O,SAAAA,EACAhB,EAAA9N,EAAA,EAAA0N,EAAAC,SACAP,GAAApN,GAAA8O,SAGA,QAAAC,GAAA/O,EAAA0N,EAAAC,GACA,GAAA/O,GAAA+N,EAAA3M,EACAoN,GAAApN,IAAAqJ,KAAAzK,EAAAyK,KAAAS,KAAAlL,EAAAkL,MAGAlL,EAAAoQ,UACAH,EAAA7O,EAAA0N,EAAAC,EAAA/O,EAAAoQ,WAEApJ,EAAAoF,aAAAjI,QAAA,SAAA+L,GACAjN,SAAAiN,EACApB,GACAI,EAAA9N,EAAA,GAAA,EAAA2N,GAGAkB,EAAA7O,EAAA0N,EAAAC,EAAAmB,KAQA,QAAAhB,GAAA9N,EAAA0N,EAAAC,GACA,GAAA3N,IAAA2M,EAAAtM,OAEA,WADA2M,IAIA,IAAApO,GAAA+N,EAAA3M,EAEA,QAAApB,EAAAkL,MAEA,IAAAmF,GACAhB,EAAAjO,EAAA0N,EAAAC,EACA,MAEA,KAAAuB,GACAH,EAAA/O,EAAA0N,EAAAC,EACA,MACA,KAAAwB,GAEA,IAAAC,GAEA,QACAhC,EAAApN,GAAApB,EACAkP,EAAA9N,EAAA,EAAA0N,EAAAC,IA1JA/H,EAAAO,EAAAkJ,OAAA1I,KAAA2I,OAAA1J,MAAAW,EAAAoD,IAAAU,WACA,IAAA+C,GAAA,GAAAzI,OAAAgI,EAAAtM,QACAkO,EAAApI,EAAAoJ,IAAA5C,EAAA,SAAA/N,GACA,MAAAuH,GAAA4G,MAAAyC,QAAA5Q,GAAAwQ,EAAAD,MA4JAzB,EAAA,eAAA9H,EAAA4E,YAAA,EAAA,kBAAA5E,EAAA4E,YAAA,EAAA,IAGA,OAFAsD,GAAA,EAAAJ,EAAAW,GAEA3B,EA3KA,GAAAvG,GAAA,mBAAAjH,QAAAA,OAAA,GAAA,mBAAAC,GAAAA,EAAA,GAAA,KAEAoH,EAAAxG,EAAA,aAEAsO,EAAA,GAEAvP,GAAAD,QAAA4N,IT4zBGrM,KAAKf,KAAuB,mBAAXF,QAAyBA,OAAyB,mBAATC,MAAuBA,KAAyB,mBAAXF,QAAyBA,aAExHuQ,YAAY,IAAIC,IAAI,SAAS3P,EAAQjB,EAAOD,IAC/C,SAAWM,GUv0BX,YAUA,SAAAwQ,GAAAjD,EAAAC,EAAAC,EAAAhH,EAAAgK,GACAhK,EAAAO,EAAAkJ,OAAA1I,KAAA2I,OAAA1J,MAAAW,EAAAoD,IAAAhE,UACA,IAAAkK,GAAAC,KAAAnD,EAAAC,EAAAhH,EAEA,OAAAgK,GACAC,EAAA9H,OAAA,SAAAgI,EAAAxG,GAEA,MADAwG,GAAAxG,GAAAyG,KAAAzG,EAAAqD,EAAAhH,GACAmK,OAGAF,EAAA9H,OAAA,SAAAkI,EAAA1G,GACA,MAAAyG,GAAAC,EAAA1G,EAAAqD,EAAAhH,QAKA,QAAAoK,GAAAtD,EAAAnD,EAAAqD,EAAAhH,GAeA,MAdAsK,GAAA3G,EAAAqD,EAAAhH,GACA7C,QAAA,SAAAoN,GACA,GAAA5Q,GAAA4G,EAAAqD,WACAe,KAAA3E,EAAA2E,KACAd,SAAA0G,EACAhH,SAAAI,EACAe,OAAA1E,EAAA0E,SAEAnB,EAAAiH,EAAA7Q,EAAAqN,EAAAhH,GACAoB,EAAA4C,EAAAT,SAAAA,EAAAyD,EAAAhH,EAEAuD,GAAApC,MAAAC,EACA0F,EAAA3H,KAAAoE,KAEAuD,EAIA,QAAA0D,GAAAjH,EAAAyD,EAAAhH,GACA,SAAAuD,EAAAM,UAAA7D,EAAAoG,+BACA7C,EAAAA,SAAAC,MAAAD,EAAAA,SAAAkH,KAKA,IAAA9G,GAAAJ,EAAAA,QAUA,QATA,IAAA,KAAApG,QAAA,SAAAuN,GACA,GAAAvD,GAAAxD,EAAA+G,EACA,IAAAvD,GAAA5G,EAAA4G,MAAAwD,UAAAxD,KAAA5G,EAAA4G,MAAAyD,QAAAzD,GAAA,CACA,GAAA0D,GAAA7D,EAAAG,EAAA1D,KACAoH,IAAAA,EAAAC,MAAAD,EAAAE,IAAA,MACA5D,EAAA6D,OAAAC,MAAA,OAIA1H,EA5DA,GAAAhD,GAAA,mBAAAjH,QAAAA,OAAA,GAAA,mBAAAC,GAAAA,EAAA,GAAA,KACA2Q,EAAA/P,EAAA,UACAmQ,EAAAnQ,EAAA,eACA6J,EAAA7J,EAAA,gBACAwG,EAAAxG,EAAA,YAEAjB,GAAAD,QAAA8Q,IVg4BGvP,KAAKf,KAAuB,mBAAXF,QAAyBA,OAAyB,mBAATC,MAAuBA,KAAyB,mBAAXF,QAAyBA,aAExHuQ,YAAY,EAAEqB,eAAe,GAAGC,SAAS,GAAGC,cAAc,KAAKC,IAAI,SAASlR,EAAQjB,EAAOD,IAC9F,SAAWM,GW34BX,YA0DA,SAAA+R,GAAA3H,EAAAwD,EAAAH,EAAAhH,GACA,MAAAA,GAAA+F,+BACApC,EAAAH,OAAAG,EAAA7G,MAAA6G,EAAA4H,QAAA,GAEA,EAGA,QAAAC,GAAA7H,EAAAwD,EAAAH,EAAAhH,GACA,MAAAsL,GAAA3H,EAAAwD,EAAAH,EAAAhH,GAEAO,EAAA4G,MAAAwD,UAAAxD,IACA5G,EAAA4G,MAAA0B,YAAA1B,EAAAH,IAAAhH,EAAA2F,wBAHA,EAMA,QAAA8F,GAAA9H,EAAAwD,EAAAH,EAAAhH,GACA,MAAAsL,GAAA3H,EAAAwD,EAAAH,EAAAhH,GAEAmH,EAAAiB,KAAAjB,EAAAjD,OAAAmF,GAAA,EACAlC,EAAA+B,UAAA/B,EAAAjD,OAAAoF,GAAA,EACA/I,EAAA4G,MAAA0B,YAAA1B,EAAAH,IAAAhH,EAAA2F,wBAJA,EAOA,QAAA+F,GAAA/H,GAEA,MAAApD,GAAA4G,MAAAyC,QAAAjG,EAAAgI,GAAAnC,EAAAD,KAAAoB,EAAAhH,EAAA/B,IAAA,EAGA+I,EAAAhH,EAAAgI,KAAApL,EAAA4G,MAAAyC,QAAAjG,EAAA/B,GAAA4H,EAAAD,KAAA9B,EAAA9D,EAAA/B,IAAA,GAEA,EAGA,QAAAgK,GAAAjI,EAAAqD,EAAAhH,GAEA,GAAA2D,EAAA8G,KACA,MAAAoB,GAAAC,aAAAnI,EAAAoI,KAAA/E,EAAAhH,EAIA,IAAA2D,EAAA/B,GAAA+B,EAAAgI,GAAAhI,EAAAqI,KAAArI,EAAAsI,IAAA,CAEA,GAAAtI,EAAAuI,KAAAvI,EAAAT,IAAA,CAGA,IAAAS,EAAA/B,IAAA+B,EAAAgI,EAAA,OAAA,CAEA,IAAA3L,EAAAgG,oCAEAkE,EAAAiC,yBAAAxI,GAAA,OAAA,EAIA,GAAAA,EAAA/B,GAAA+B,EAAAgI,EAAA,CACA,GAAAS,KAAA3E,EAAA9D,EAAA/B,GACAyK,IAAA5E,EAAA9D,EAAAgI,EAEA,IAAAS,GAAAC,IAAA9L,EAAAoD,IAAA2I,YAAA3I,GAEA,OAAA,CAGA,IAAA3D,EAAA6F,aACA,GAAAuG,EAAAC,GACA,IAAAX,EAAA/H,GAAA,OAAA,MACA,IAAAA,EAAAgI,EAAAzH,OAAAoF,GAAA3F,EAAA/B,EAAAsC,OAAAoF,GACA,GAAA3F,EAAAgI,EAAAzH,OAAAoF,GAAA3F,EAAA/B,EAAAsC,OAAAoF,EAAA,OAAA,MAEA,IAAA3F,EAAA/B,EAAA6B,KAAAE,EAAAgI,EAAAlI,KAAA,OAAA,CAGA,QAAA,EAKA,GAAAzD,EAAAoE,YAAA,OAAA,CAGA,IAAApE,EAAA6F,cAAAlC,EAAAgI,EAAA,OAAA,CAGA,IAAA3L,EAAA8F,8BAAAvF,EAAA0C,KAAAU,GAAAlJ,OAAA,EAAA,OAAA,CAEA,IAAAuF,EAAAiG,sBAAA,CAEA,GAAAtC,EAAA/B,GAAA,SAAA+B,EAAA/B,EAAA8F,YAAA/D,EAAAgI,EAAA,OAAA,CACA,IAAAhI,EAAAgI,GAAA,SAAAhI,EAAAgI,EAAAjE,YAAA/D,EAAA/B,EAAA,OAAA,EAGA,OAAA,EAEA,OAAA,EAoBA,QAAAsI,GAAAD,EAAAlD,EAAAC,EAAAhH,GAKA,QAAAkI,GAAA9N,GAEA,GAAAA,IAAA2M,EAAAtM,OAKA,YAHAmR,EAAAW,EAAAvF,EAAAhH,IACAiK,EAAA9K,KAAAoB,EAAAqD,UAAA2I,IAMA,IAAApF,GAAAJ,EAAA3M,EACA,KAAA,GAAA2C,KAAAiD,GAAAuF,iBAAA,CACA,GAAAmF,GAAA1K,EAAAuF,iBAAAxI,GACAyP,EAAA/E,EAAAN,EAGAuD,KAAA6B,MACAC,GAAAC,EAAA/B,GAAAgC,YAAAF,GAAAC,EAAA/B,GAAAiC,UACAF,EAAA/B,GAAA+B,QAAAA,EAAA/B,GAAA+B,MAAAF,EAAApF,EAAAH,EAAAhH,KAEAuM,EAAA7B,GAAAvD,EACAe,EAAA9N,EAAA,SACAmS,GAAA7B,KA3BA1K,EAAAO,EAAAkJ,OAAA1I,KAAA2I,OAAA1J,MAAAW,EAAAoD,IAAAhE,UAEA,IAAAwM,KAgCA,OAFArE,GAAA,GAEA+B,EA3MA9P,EAAA,aAEA,IAAAoG,GAAA,mBAAAjH,QAAAA,OAAA,GAAA,mBAAAC,GAAAA,EAAA,GAAA,KACAoH,EAAAxG,EAAA,aACA0R,EAAA1R,EAAA,eACAsN,EAAAlH,EAAA4G,MAAAM,YACAkD,EAAApK,EAAA4G,MAAAwD,SAEAzR,GAAAD,QAAAiR,CAGA,IAAAuC,IACA7K,GACA8K,WAAA,EACAC,SAAA,EACAC,UAAA,GAEAjB,GACAe,WAAA,EACAC,SAAA,EACAC,UAAA,GAEAV,KACAQ,WAAA,EACAE,UAAA,GAEA1J,KACAwJ,WAAA,EACAE,UAAA,GAEArB,OACAmB,WAAA,EACAD,MAAAhB,GAEA3O,MACA6P,SAAA,EACAF,MAAAnB,GAEA9H,OACAkJ,WAAA,EACAC,SAAA,EACAF,MAAAjB,GAEAf,MACAkC,SAAA,GAEAE,QACAH,WAAA,GAwGAxC,GAAAiC,yBAAA,SAAAxI,GACA,GAAAmE,IAAA,EAAAgF,GAAA,CACA,KAAA,GAAA3J,KAAAQ,GAAA,CACA,GAAAwD,GAAAxD,EAAAR,EAOA,IANAgE,EAAAO,YACAI,GAAA,GAEAvH,EAAA4G,MAAAM,YAAAN,IAAAhE,IAAA4J,KAAA5J,IAAA6J,MACAF,GAAA,GAEAhF,GAAAgF,EAAA,MAGA,MAAAhF,KAAAgF,KXs7BGtS,KAAKf,KAAuB,mBAAXF,QAAyBA,OAAyB,mBAATC,MAAuBA,KAAyB,mBAAXF,QAAyBA,aAExHuQ,YAAY,EAAEoD,aAAa,GAAG7B,cAAc,KAAK8B,IAAI,SAAS/S,EAAQjB,EAAOD,GY7lChF,YAEA,IAAA8H,GAAA5G,EAAA,WAEA4J,EAAA7K,EAAAD,SAEAwL,WAAAtK,EAAA,gBACA8J,YAAA9J,EAAA,iBAEA4F,UAAA5F,EAAA,eACA8P,KAAA9P,EAAA,UACAgT,UAAAhT,EAAA,eAGA4J,GAAAqJ,OAAA,SAAArG,EAAA/G,EAAAqN,EAAAC,GACAtN,EAAAe,EAAAgD,IAAAwJ,OAAAvN,GACAsN,EAAArR,SAAAqR,GAAAvN,UAAA,GAAAuN,CAKA,IACArD,GAAAmD,EADAI,EAAAxN,EAAAyN,QAAA1J,EAAAU,cAAAsC,EAAA/G,IAAA+G,GACA2G,EAAA,CAuBA,OArBAJ,MAAA,GAAAA,GAAAA,EAAA5F,UACAuC,EAAAuD,EAAArL,OAAA,SAAA2E,EAAAC,GACA,MAAAhD,GAAAkG,KAAAnD,EAAAC,EAAA/G,SAGAiK,EAAAuD,EAAA3M,IAAA,SAAAkG,GACA,MAAAhD,GAAAkG,QAAAlD,EAAA/G,KACA,GACA0N,GAAA,GAGAJ,KAAA,GAAAA,GAAAA,EAAAvN,UACAqN,EAAArM,EAAA4M,aAAA1D,EAAA,SAAAnD,EAAAnD,GACA,MAAAI,GAAAoJ,UAAArG,EAAAnD,EAAA3D,EAAAqN,IACAK,GAAA,IAEAN,EAAArM,EAAA6M,UAAA3D,EAAA,SAAAtG,GACA,MAAAI,GAAAoJ,aAAAxJ,EAAA3D,EAAAqN,IACAK,GAAA,GACAA,GAAA,GAEAN,KZgmCG5L,UAAU,GAAGqM,eAAe,GAAGC,cAAc,GAAG3C,SAAS,GAAGC,cAAc,GAAG2C,gBAAgB,KAAKC,IAAI,SAAS7T,EAAQjB,EAAOD,IACjI,SAAWM,Ga9oCX,YAkBA,SAAA+Q,GAAA3G,EAAAqD,EAAAhH,GACAA,EAAAO,EAAAkJ,OAAA1I,KAAA2I,OAAA1J,MAAAW,EAAAoD,IAAAhE,UAEA,IAAAkO,GAAAjO,EAAAsF,aAAAjE,OAAA,SAAAkJ,GACA,MAAA2D,GAAApC,aAAAnI,EAAA4G,EAAAvD,EAAAhH,IAGA,OAAAiO,GAmBA,QAAAE,GAAAhH,EAAAH,EAAAhH,GACA,MAAAO,GAAA4G,MAAA0B,YAAA1B,EAAAH,IAAAhH,EAAAyF,wBAGA,QAAA2I,GAAAzK,EAAAqD,EAAAhH,GACA,MAAA2D,GAAAuI,MAAAiC,EAAAxK,EAAAuI,IAAAlF,EAAAhH,IAAA,EACA2D,EAAAT,MAAAiL,EAAAxK,EAAAT,IAAA8D,EAAAhH,IAAA,GACA,EAGA,QAAAqO,GAAA1K,EAAAqD,EAAAhH,GACA,IAAAoO,EAAAzK,EAAAqD,EAAAhH,GAAA,OAAA,CACA,IAAA2D,EAAA/B,GAAA+B,EAAAgI,EAAA,CAGA,GAAA2C,GAAA7G,EAAA9D,EAAA/B,GACA2M,EAAA9G,EAAA9D,EAAAgI,EAGA,IAAA2C,GAAAC,EAAA,CAEA,GAAA5K,EAAA4H,MACA,OAAA,CAIA,IAAA5H,EAAAH,OAAAiE,EAAA9D,EAAAH,OACA,OAAA,OAIA,CACA,GAAAxD,EAAAoE,YAAA,OAAA,CAGA,IAAApE,EAAA6F,cAAAlC,EAAAgI,EAAA,OAAA,CAGA,IAAA3L,EAAA8F,8BAAAvF,EAAA0C,KAAAU,GAAAlJ,OAAA,EAAA,OAAA,CAGA,IAAAkJ,EAAA4H,MAAA,OAAA,EAEA,OAAA,EAGA,QAAAiD,GAAA7K,EAAAqD,EAAAhH,GAEA,GAAA2D,EAAA/B,GAAA+B,EAAAgI,EAAA,CACA,GAAApL,EAAAoD,IAAA2I,YAAA3I,GAAA,OAAA,CAEA,IAAA2K,GAAA7G,EAAA9D,EAAA/B,GACA2M,EAAA9G,EAAA9D,EAAAgI,EAEA,QAAA2C,KAAA3K,EAAAgI,GAAA8C,EAAA9K,EAAAgI,MACA4C,KAAA5K,EAAA/B,GAAA6M,EAAA9K,EAAA/B,IAEA,OAAA,EAGA,QAAA8M,GAAA/K,EAAAqD,EAAAhH,GACA,IAAAoO,EAAAzK,EAAAqD,EAAAhH,GAAA,OAAA,CAGA,KAAA2D,EAAA/B,IAAA+B,EAAAgI,EAAA,OAAA,CAEA,IAAA3L,EAAAkG,eAAAjK,SAAA0H,EAAA7G,KAAA,OAAA,CAIA,IAAA6R,KACAhL,EAAA/B,GAAA3F,SAAA0H,EAAA/B,EAAA8F,aACA/D,EAAAgI,GAAA1P,SAAA0H,EAAAgI,EAAAjE,UAGA,IAAAiH,EAAA,CACA,GAAAC,KACAjL,EAAA/B,GAAA6F,EAAA9D,EAAA/B,MACA+B,EAAAgI,GAAAlE,EAAA9D,EAAAgI,GAEA,IAAAiD,EAAA,CACA,GAAAlH,GAAA/D,EAAA/B,EAAA8F,WAAA/D,EAAAgI,EAAAjE,SACA,SAAA1H,EAAAmG,oBAAA,QAAAuB,GAAA/D,EAAAH,QAIA,OAAA,EAGA,QAAAqL,GAAAlL,EAAAqD,EAAAhH,GACA,MAAAoO,GAAAzK,EAAAqD,EAAAhH,GAOA,KAAA2D,EAAA/B,EAAAsC,MAAAP,EAAA/B,EAAAsH,UAAA,KAAAvF,EAAAgI,EAAAzH,MAAAP,EAAAgI,EAAAjE,WAPA,EAUA,QAAAoH,GAAAnL,EAAAqD,EAAAhH,GACA,MAAAoO,GAAAzK,EAAAqD,EAAAhH,IAEA6O,EAAAlL,EAAAqD,EAAAhH,KAEAA,EAAAmG,oBAAA,QAAAxC,EAAAgI,EAAAjE,WAAA/D,EAAAH,QAJA,EAOA,QAAAuL,GAAApL,EAAAqD,EAAAhH,GAEA,SAAA2D,EAAAuI,MAAAvI,EAAAT,MAAAS,EAAA8G,OAAA9G,EAAA8G,KAAA/C,WAAA/D,EAAA/B,GAAA+B,EAAAgI,GAAAhI,EAAA7G,MACAkD,EAAAoG,8BAAAzC,EAAAH,OAzJA,GAAAjD,GAAA,mBAAAjH,QAAAA,OAAA,GAAA,mBAAAC,GAAAA,EAAA,GAAA,KACAoH,EAAAxG,EAAA,aACAsN,EAAAlH,EAAA4G,MAAAM,YACAgH,EAAAlO,EAAA4G,MAAAsH,eAEAP,EAAAhV,EAAAD,QAAAqR,EAEA0E,EAAAd,EAAAe,MACArQ,MAAAyP,EACAa,IAAAR,EACAS,KAAAN,EACAO,KAAAN,EACArE,KAAAsE,EACAM,KAAAb,EAaAN,GAAApC,aAAA,SAAAnI,EAAA4G,EAAAvD,EAAAhH,GACA,GAAAsP,GAAA/O,EAAAgP,SAAAC,MAAAjF,GACAkF,EAAAH,EAAAI,iBACAC,EAAAL,EAAAM,iBAEA,KAAA,GAAAxV,KAAAqV,GACA,KAAAA,EAAArV,IAAAuJ,IAAA,OAAA,CAGA,KAAA,GAAAR,KAAAQ,GACA,IAAAgM,EAAAxM,GAAA,OAAA,CAGA,QAAA6L,EAAAzE,IAAAyE,EAAAzE,GAAA5G,EAAAqD,EAAAhH,MbowCGxF,KAAKf,KAAuB,mBAAXF,QAAyBA,OAAyB,mBAATC,MAAuBA,KAAyB,mBAAXF,QAAyBA,aAExHuQ,YAAY,IAAIgG,IAAI,SAAS1V,EAAQjB,EAAOD,IAC/C,SAAWM,GchzCX,YAiBA,SAAA0K,GAAA8C,EAAAC,EAAAhH,GACAA,EAAAO,EAAAkJ,OAAA1I,KAAA2I,OAAA1J,MAAAW,EAAAoD,IAAAE,YAGA,IAAA6L,MAAAC,KAAAvC,KACAwC,GAAA,EACAC,GAAA,EACAC,IAEAnJ,GAAA5J,QAAA,SAAAgK,EAAAxK,GAIA,GAFAuT,EAAA/I,EAAA1D,MAAA9G,EAEAwK,EAAA2I,SACAA,EAAA3Q,KAAAgI,GACAM,EAAAN,IAAA,MAAAA,EAAAjD,KACA8L,GAAA,EAEAC,GAAA,MAEA,IAAA9I,EAAA2I,YAAA,IAAAvP,EAAA4G,MAAAyD,QAAAzD,GAAA,CACA,GAAA5G,EAAA4G,MAAAM,YAAAN,KACAnH,EAAAuE,iCACAhE,EAAA4G,MAAA0B,YAAA1B,EAAAH,EAAA,IAAAhH,EAAAuE,gCAEA,MAEAwL,GAAA5Q,KAAAgI,MAIA4I,EAAAvR,KAAA2R,EAAAH,EAAAC,EAAAC,GAEA,IAAAE,GAAArP,EAAAsP,cAAAN,EAAA,EAeA,OAbAK,GAAAjT,QAAA,SAAAmT,GACA,GAAApJ,GAAA4I,EAAAS,OAAAD,EACA,IAAApJ,EAAAzM,OAAA,EAAA,CACA,GAAAuF,EAAAoE,aAAA,IAAA8C,EAAAzM,OAAA,MACA+S,GAAArO,KAAA+H,MAIAsG,EAAArQ,QAAA,SAAA+J,GAEAA,EAAArK,IAAAoH,EAAApH,IAAAqK,KAGAsG,EAUA,QAAA2C,GAAAH,EAAAC,EAAAC,GACA,MAAA,UAAAhW,EAAA2H,GAEA,MAAA3H,GAAAgK,OAAArC,EAAAqC,KACA8L,EAGAQ,EAAA3O,EAAAqC,MAAAsM,EAAAtW,EAAAgK,MAFAsM,EAAAtW,EAAAgK,MAAAsM,EAAA3O,EAAAqC,MAMAgM,EAAAhW,EAAAuJ,MAAAyM,EAAArO,EAAA4B,OApFA,GAAA1C,GAAA5G,EAAA,WACAwG,EAAAxG,EAAA,aACAoG,EAAA,mBAAAjH,QAAAA,OAAA,GAAA,mBAAAC,GAAAA,EAAA,GAAA,KACAkO,EAAAlH,EAAA4G,MAAAM,WAEAvO,GAAAD,QAAAgL,CA6DA,IAAAuM,IACAhH,EAAA,EACAD,EAAA,EACAD,EAAA,EACAD,EAAA,EAkBApF,GAAApH,IAAA,SAAA4T,GACA,MAAAA,GAAA5P,IAAA,SAAAsG,GACA,MAAA5G,GAAA4G,MAAAyD,QAAAzD,GAAA,QAAAA,EAAA1D,OACAiN,KAAA,QdqzCGlW,KAAKf,KAAuB,mBAAXF,QAAyBA,OAAyB,mBAATC,MAAuBA,KAAyB,mBAAXF,QAAyBA,aAExHuQ,YAAY,EAAErI,UAAU,KAAKmP,IAAI,SAASxW,EAAQjB,EAAOD,IAC5D,SAAWM,Ger5CX,YAEA,IAAAF,GAAAE,GAAAD,MAEAa,GAAA,yBAEAd,EAAAuX,aACAC,MAAA,QACAC,IAAA,MACAC,KAAA,OACAC,KAAA,OACAC,KAAA,OACAC,IAAA,MACAC,UAAA,aAGA9X,EAAA+X,eAAA,Kfu5CG5W,KAAKf,KAAuB,mBAAXF,QAAyBA,OAAyB,mBAATC,MAAuBA,KAAyB,mBAAXF,QAAyBA,aAExH+X,wBAAwB,KAAKC,IAAI,SAASnX,EAAQjB,EAAOD,GgBz6C5DC,EAAAD,SACAsK,SAAApJ,EAAA,sBhB+6CGoX,kBAAkB,KAAKC,IAAI,SAASrX,EAAQjB,EAAOD,IACtD,SAAWM,GiBj7CX,YAuBA,SAAAkY,GAAAlO,EAAAyD,EAAAhH,EAAA8P,GACA,GAAA4B,MACAC,EAAApR,EAAA0C,KAAAM,EAAAA,UACAM,EAAAN,EAAAM,SACAF,EAAAJ,EAAAA,SAEAqO,EAAArR,EAAAoD,IAAAxB,OAAAoB,EAAAA,SAAA,SAAAvJ,EAAAmN,EAAAhE,GACA,GAAAtG,GAAA0D,EAAA4G,MAAA1G,UAAA0G,GACA0K,EAAA7X,EAAA6C,GAAA7C,EAAA6C,MAEA,OADAgV,GAAA1S,MAAAgE,QAAAA,EAAAgE,MAAAA,IACAnN,MAqDA,OAjDAuG,GAAApD,QAAAyU,EAAA,SAAAC,GACA,GAAAC,GAAAD,EAAAhR,IAAA,SAAAkR,GACA,MAAAA,GAAA5O,QAAA5C,EAAAE,UAAAuR,OAAAzR,EAAA4G,MAAA1G,UAAAsR,EAAA5K,OACA,KAAA2I,GAAAA,EAAAiC,EAAA5K,MAAA1D,MAAA,MAAA,SAEAwO,EAAAJ,EAAAhR,IAAA,SAAAkR,GACA,GAAAG,GAAA3R,EAAA4G,MAAAM,YAAAsK,EAAA5K,OAAA,YAAA,UAEA/F,EAAAqQ,EAAArQ,MAAA8Q,GAAAH,EAAA5K,MAAA4K,EAAA5O,QAAAI,EAAAM,SAAAmD,EAAAhH,EAEA,QAAA8P,GAAAA,EAAAiC,EAAA5K,MAAA1D,MAAArC,EAAA/F,KAAAC,IAAA8F,EAAA,OAGAsQ,GAAAvS,MACAgT,OAAAL,EAAApB,KAAA,OACAtP,MAAA/F,KAAAK,IAAA0W,MAAA,KAAAH,OAKApO,IAAAkI,MAGApI,EAAA/B,GAAA+B,EAAAgI,GACAlE,EAAA9D,EAAA/B,GAAA6F,EAAA9D,EAAAgI,IACA+F,EAAAvS,MACAgT,OAAA,WACA/Q,MAAA,KAOAuQ,EAAAlX,OAAA,GAAAoJ,IAAAkI,OACApI,EAAA/B,GAAA+B,EAAAgI,GAAAhI,EAAAqI,KAAArI,EAAA8G,MACAiH,EAAAvS,MACAgT,OAAA,kBACA/Q,MAAAiR,KAMAX,EAAAvS,MACAgT,OAAA,YAAAtO,EACAzC,MAAAkR,EAAAzO,MAIAzC,MAAAsQ,EAAAvP,OAAA,SAAAoQ,EAAAvZ,GACA,MAAAuZ,GAAAvZ,EAAAoI,OACA,GACAsQ,SAAAA,GAxFAvX,EAAA,aAEA,IAAAoG,GAAA,mBAAAjH,QAAAA,OAAA,GAAA,mBAAAC,GAAAA,EAAA,GAAA,KACAkO,EAAAlH,EAAA4G,MAAAM,WAEAvO,GAAAD,QAAAwY,CAGA,IAAAY,GAAA,GAEAC,GACAnD,KAAA,IACAC,KAAA,IACAF,IAAA,IACAG,KAAA,IACAzQ,MAAA,IACA4T,OAAA,IACAC,OAAA,IACAhI,KAAA,IA2EAiI,KAAAC,KAAAC,EAAA,GAAAC,EAAA,GAEAH,GAAAI,MAAA,IACAJ,EAAAK,IAAA,EACAL,EAAAM,IAAA,GACAN,EAAAO,WAAA,EACAP,EAAAQ,WAAA,KACAR,EAAAS,SAAA,IACAT,EAAAU,UAAA,GACAV,EAAAW,WAAA,GACAX,EAAAY,SAAA,IACAZ,EAAAa,UAAA,GACAb,EAAAc,YAAA,GACAd,EAAAnH,MAAA,GACAmH,EAAA7F,OAAA,GACA6F,EAAAe,IAAAb,EACAF,EAAAgB,SAAAb,EAEAF,EAAAI,IAAA,EACAJ,EAAA7V,KAAA,GACA6V,EAAAnP,MAAA,GACAmP,EAAAlI,KAAA,GACAkI,EAAAc,IAAAb,EACAD,EAAAe,SAAAb,EAEApB,EAAAkC,eAAA,SAAAxM,EAAAhE,EAAAU,EAAAmD,EAAAhH,GACA,GAAA6I,GAAAtI,EAAA4G,MAAA0B,YAAA1B,EAAAH,EACA,QAAA7D,GACA,IAAAyQ,GACA,MAAArT,GAAA4G,MAAAyC,QAAAzC,GAAAqC,EAAAD,IAAAmJ,EAAAK,IAAAL,EAAAI,MACAJ,EAAAK,GAEA,KAAAc,GACA,MAAAtT,GAAA4G,MAAAyC,QAAAzC,GAAAqC,EAAAD,IAAAmJ,EAAAK,IAAAL,EAAAI,MACA3L,EAAAjD,OAAAoF,EAAAoJ,EAAAM,IACAN,EAAAK,IAAAL,EAAAI,KAEA,KAAA9F,KACA,MAAAnJ,KAAAkI,KAAA2G,EAAAO,WAEApK,GAAA7I,EAAAwF,4BAAAkN,EAAAQ,WACArK,GAAA7I,EAAAyF,wBAAAiN,EAAAS,SAAAT,EAAAU,SAEA,KAAArG,KACA,MAAAlJ,KAAAkI,KAAA2G,EAAAO,YACApK,GAAA7I,EAAAwF,4BAAAkN,EAAAQ,WACArK,GAAA7I,EAAAyF,wBAAAiN,EAAAS,SAAAT,EAAAU,WAAAV,EAAAI,KAEA,KAAAgB,OACA,GAAAC,GAAA5M,EAAAiB,KAAAjB,EAAAjD,OAAAmF,GAAAlC,EAAA+B,UAAA/B,EAAAjD,OAAAoF,EAGA0K,EAAA,QAAAnQ,GAAA,SAAAA,CAGA,OAAAkQ,GAAArB,EAAAa,UAGAS,EAAAtB,EAAAc,YAEA3K,GAAA7I,EAAA0F,2BAAAgN,EAAAW,WAAAxK,GAAA7I,EAAA2F,uBAAA+M,EAAAY,SAAAZ,EAAAa,SACA,KAAAU,OACA,MAAApL,IAAA7I,EAAA4F,uBAAA8M,EAAAnH,MAAAsH,CACA,KAAAqB,QACA,MAAAxB,GAAA7F,OAEA,MAAAgG,IAGApB,EAAAkC,eAAAhT,OAAA+R,EAEAjB,EAAA0C,aAAA,SAAAhN,EAAAhE,EAAAU,EAAAmD,EAAAhH,GAEA,OAAAmD,GACA,IAAAyQ,GAAA,MAAAjB,GAAAI,GACA,KAAAc,GAAA,MAAAlB,GAAAI,GACA,KAAAqB,MACA,MAAA,QAAAvQ,EAAA+O,EACA/O,IAAAkI,KAAA6G,EACA,SAAA/O,EAAA+O,EACAD,EAAA7V,IACA,KAAAgX,OAAA,MAAAnB,GAAAnP,KACA,KAAAuI,MAAA,MAAA4G,GAAAlI,KAEA,MAAAmI,IAGAnB,EAAA0C,aAAAxT,OAAAgS,EAGAlB,EAAArQ,OACAsL,UAAA+E,EAAAkC,eACAhH,QAAA8E,EAAA0C,gBjBq7CG3Z,KAAKf,KAAuB,mBAAXF,QAAyBA,OAAyB,mBAATC,MAAuBA,KAAyB,mBAAXF,QAAyBA,aAExH2T,aAAa,KAAKoH,IAAI,SAASla,EAAQjB,EAAOD,GkBlnDjD,YAEA,IAAA0H,GAAAxG,EAAA,YAEA4G,EAAA7H,EAAAD,SACA8K,OAGAhD,GAAAuT,QAAAvV,MAAAuV,SAAA,SAAAC,GACA,MAAA,qBAAAC,SAAAha,KAAA+Z,IAGAxT,EAAApB,KAAA,SAAA5F,EAAA0a,GACA,MAAAjV,MAAAC,UAAA1F,EAAA,KAAA0a,IAGA1T,EAAAkC,KAAA,SAAAsR,GACA,GAAA3S,GAAAtD,IACA,KAAAsD,IAAA2S,GAAAjW,EAAAa,KAAAyC,EACA,OAAAtD,IAGAyC,EAAA6M,UAAA,SAAA1K,EAAAlK,EAAA0U,EAAArM,GACA,MACA6B,GAAArC,IADA,IAAA6M,EACA1U,EACA,SAAA0b,GACA,GAAA5a,GAAAiH,EAAA6M,UAAA8G,EAAA1b,EAAA0U,EAAA,EACA,OAAArM,GAAAvH,EAAAuH,OAAAN,EAAA4T,UAAA7a,KAIAiH,EAAA4M,aAAA,SAAAzK,EAAAlK,EAAA0U,EAAArM,GACA,MAAA,KAAAqM,EACAxK,EAAAf,OAAAnJ,MACAkK,EAAArC,IAAA,SAAA6T,GACA,GAAA5a,GAAAiH,EAAA4M,aAAA+G,EAAA1b,EAAA0U,EAAA,EACA,OAAArM,GAAAvH,EAAAuH,OAAAN,EAAA4T,UAAA7a,KAIAiH,EAAA4T,SAAA,SAAAC,GACA,OAAA7T,EAAAuT,QAAAM,IAAAA,EAAAna,OAAA,GAIAsG,EAAAC,SAAA,SAAA6T,EAAAC,GAOA,MANA7Y,UAAA4Y,EAAAjY,MACAkY,EAAA3V,KAAA0V,EAAAjY,QAEAiY,EAAArX,MAAAuD,EAAAC,SAAA6T,EAAArX,KAAAsX,GACAD,EAAApX,OAAAsD,EAAAC,SAAA6T,EAAApX,MAAAqX,IAEAA,GAGA/T,EAAAiC,MAAA,SAAA9I,EAAA2H,GACA,GAAA7H,KAGA,OAFAE,GAAAiD,QAAA,SAAAyE,GAAA5H,EAAA4H,IAAA,IACAC,EAAA1E,QAAA,SAAAyE,GAAA5H,EAAA4H,IAAA,IACAb,EAAAkC,KAAAjJ,IAIA+G,EAAAgD,IAAAwJ,OAAA,SAAAvN,GAEA,OAAAA,EAAAe,EAAAkC,KAAAjD,OAAAmC,OAAA,SAAAJ,EAAAzD,GAEA,MADAyD,GAAAzD,GAAA0B,EAAA1B,GACAyD,GACAgT,OAAAC,OAAArU,EAAAoD,IAAAkR,eAeAlU,EAAAmU,SAAA,SAAA7K,GAIA,IAAA,GAHA8K,QAGA/a,EAAA,EAAAA,EAAAiQ,EAAA5P,OAAAL,IACA,IAAA,GAAA2C,GAAA,EAAAsF,EAAA8S,EAAA1a,OAAA4H,EAAAtF,EAAAA,IACAoY,EAAAhW,KAAAgW,EAAApY,GAAAwT,OAAAlG,EAAAjQ,IAGA,OAAA+a,IAGApU,EAAAsP,cAAA,SAAAhG,EAAA/L,GAEA,IAAA,GADA8W,QACAhb,EAAA,EAAAA,EAAAiQ,EAAA5P,OAAAL,IACA,IAAA,GAAA2C,GAAA,EAAAsF,EAAA+S,EAAA3a,OAAA4H,EAAAtF,EAAAA,IAAA,CACA,GAAAsY,GAAAD,EAAArY,GAAAwT,OAAAlG,EAAAjQ,GACAib,GAAA5a,QAAA6D,GACA8W,EAAAjW,KAAAkW,GAIA,MAAAD,IAGArU,EAAAuU,QAAA,SAAAjL,EAAA/L,GAGA,IAAA,GAFA8W,QACAG,KACAnb,EAAA,EAAAA,EAAAiQ,EAAA5P,OAAAL,IACA,IAAA,GAAA2C,GAAA,EAAAsF,EAAA+S,EAAA3a,OAAA4H,EAAAtF,EAAAA,IAAA,CACA,GAAAsY,GAAAD,EAAArY,GAAAwT,OAAAlG,EAAAjQ,GACAib,GAAA5a,OAAA6D,EACA8W,EAAAjW,KAAAkW,GACAA,EAAA5a,SAAA6D,GACAiX,EAAApW,KAAAkW,GAIA,MAAAE,IAGAxU,EAAAyU,MAAA,SAAAtb,EAAA2H,GAEA,IAAA,GADAD,MACAxH,EAAA,EAAAA,EAAAF,EAAAO,OAAAL,IACA,IAAA,GAAA2C,GAAA,EAAAA,EAAA8E,EAAApH,OAAAsC,IACA6E,EAAAzC,KAAAjF,EAAAE,GAAAmW,OAAA1O,EAAA9E,IAGA,OAAA6E,MlBunDG4E,WAAW,IAAIiP,IAAI,SAAStb,EAAQjB,EAAOD,IAC9C,SAAWM,GmB3vDX,YAGA,IAAAF,GAAAE,GAAAD,MAEAD,GAAAwX,MAAA,QACAxX,EAAAqc,IAAA,MACArc,EAAAsc,QAAA,UACAtc,EAAAuc,MAAA,QAEAvc,EAAAua,EAAA,IACAva,EAAAwa,EAAA,IACAxa,EAAA0T,IAAA,MACA1T,EAAA2T,IAAA,MACA3T,EAAA+a,KAAA,OACA/a,EAAA4a,MAAA,QACA5a,EAAAya,MAAA,QACAza,EAAA0S,KAAA,OACA1S,EAAA6a,OAAA,SAEA7a,EAAAmQ,EAAA,IACAnQ,EAAAkQ,EAAA,IACAlQ,EAAAgQ,EAAA,IACAhQ,EAAAiQ,EAAA,MnB8vDG9O,KAAKf,KAAuB,mBAAXF,QAAyBA,OAAyB,mBAATC,MAAuBA,KAAyB,mBAAXF,QAAyBA,qBAEhH,IAAI","file":"compass.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = {\n   hcluster: require(\"./hcluster\"),\n   Kmeans: require(\"./kmeans\"),\n   kmeans: require(\"./kmeans\").kmeans\n};","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.cp = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nmodule.exports = {\n   hcluster: require(\"./hcluster\"),\n   Kmeans: require(\"./kmeans\"),\n   kmeans: require(\"./kmeans\").kmeans\n};\n},{\"./hcluster\":3,\"./kmeans\":4}],2:[function(require,module,exports){\nmodule.exports = {\n  euclidean: function(v1, v2) {\n      var total = 0;\n      for (var i = 0; i < v1.length; i++) {\n         total += Math.pow(v2[i] - v1[i], 2);      \n      }\n      return Math.sqrt(total);\n   },\n   manhattan: function(v1, v2) {\n     var total = 0;\n     for (var i = 0; i < v1.length ; i++) {\n        total += Math.abs(v2[i] - v1[i]);      \n     }\n     return total;\n   },\n   max: function(v1, v2) {\n     var max = 0;\n     for (var i = 0; i < v1.length; i++) {\n        max = Math.max(max , Math.abs(v2[i] - v1[i]));      \n     }\n     return max;\n   }\n};\n},{}],3:[function(require,module,exports){\nvar distances = require(\"./distance\");\n\nvar HierarchicalClustering = function(distance, linkage, threshold) {\n   this.distance = distance;\n   this.linkage = linkage;\n   this.threshold = threshold == undefined ? Infinity : threshold;\n}\n\nHierarchicalClustering.prototype = {\n   cluster : function(items, snapshotPeriod, snapshotCb) {\n      this.clusters = [];\n      this.dists = [];  // distances between each pair of clusters\n      this.mins = []; // closest cluster for each cluster\n      this.index = []; // keep a hash of all clusters by key\n      \n      for (var i = 0; i < items.length; i++) {\n         var cluster = {\n            value: items[i],\n            key: i,\n            index: i,\n            size: 1\n         };\n         this.clusters[i] = cluster;\n         this.index[i] = cluster;\n         this.dists[i] = [];\n         this.mins[i] = 0;\n      }\n\n      for (var i = 0; i < this.clusters.length; i++) {\n         for (var j = 0; j <= i; j++) {\n            var dist = (i == j) ? Infinity : \n               this.distance(this.clusters[i].value, this.clusters[j].value);\n            this.dists[i][j] = dist;\n            this.dists[j][i] = dist;\n\n            if (dist < this.dists[i][this.mins[i]]) {\n               this.mins[i] = j;               \n            }\n         }\n      }\n\n      var merged = this.mergeClosest();\n      var i = 0;\n      while (merged) {\n        if (snapshotCb && (i++ % snapshotPeriod) == 0) {\n           snapshotCb(this.clusters);           \n        }\n        merged = this.mergeClosest();\n      }\n    \n      this.clusters.forEach(function(cluster) {\n        // clean up metadata used for clustering\n        delete cluster.key;\n        delete cluster.index;\n      });\n\n      return this.clusters;\n   },\n  \n   mergeClosest: function() {\n      // find two closest clusters from cached mins\n      var minKey = 0, min = Infinity;\n      for (var i = 0; i < this.clusters.length; i++) {\n         var key = this.clusters[i].key,\n             dist = this.dists[key][this.mins[key]];\n         if (dist < min) {\n            minKey = key;\n            min = dist;\n         }\n      }\n      if (min >= this.threshold) {\n         return false;         \n      }\n\n      var c1 = this.index[minKey],\n          c2 = this.index[this.mins[minKey]];\n\n      // merge two closest clusters\n      var merged = {\n         left: c1,\n         right: c2,\n         key: c1.key,\n         size: c1.size + c2.size\n      };\n\n      this.clusters[c1.index] = merged;\n      this.clusters.splice(c2.index, 1);\n      this.index[c1.key] = merged;\n\n      // update distances with new merged cluster\n      for (var i = 0; i < this.clusters.length; i++) {\n         var ci = this.clusters[i];\n         var dist;\n         if (c1.key == ci.key) {\n            dist = Infinity;            \n         }\n         else if (this.linkage == \"single\") {\n            dist = this.dists[c1.key][ci.key];\n            if (this.dists[c1.key][ci.key] > this.dists[c2.key][ci.key]) {\n               dist = this.dists[c2.key][ci.key];\n            }\n         }\n         else if (this.linkage == \"complete\") {\n            dist = this.dists[c1.key][ci.key];\n            if (this.dists[c1.key][ci.key] < this.dists[c2.key][ci.key]) {\n               dist = this.dists[c2.key][ci.key];              \n            }\n         }\n         else if (this.linkage == \"average\") {\n            dist = (this.dists[c1.key][ci.key] * c1.size\n                   + this.dists[c2.key][ci.key] * c2.size) / (c1.size + c2.size);\n         }\n         else {\n            dist = this.distance(ci.value, c1.value);            \n         }\n\n         this.dists[c1.key][ci.key] = this.dists[ci.key][c1.key] = dist;\n      }\n\n    \n      // update cached mins\n      for (var i = 0; i < this.clusters.length; i++) {\n         var key1 = this.clusters[i].key;        \n         if (this.mins[key1] == c1.key || this.mins[key1] == c2.key) {\n            var min = key1;\n            for (var j = 0; j < this.clusters.length; j++) {\n               var key2 = this.clusters[j].key;\n               if (this.dists[key1][key2] < this.dists[key1][min]) {\n                  min = key2;                  \n               }\n            }\n            this.mins[key1] = min;\n         }\n         this.clusters[i].index = i;\n      }\n    \n      // clean up metadata used for clustering\n      delete c1.key; delete c2.key;\n      delete c1.index; delete c2.index;\n\n      return true;\n   }\n}\n\nvar hcluster = function(items, distance, linkage, threshold, snapshot, snapshotCallback) {\n   distance = distance || \"euclidean\";\n   linkage = linkage || \"average\";\n\n   if (typeof distance == \"string\") {\n     distance = distances[distance];\n   }\n   var clusters = (new HierarchicalClustering(distance, linkage, threshold))\n                  .cluster(items, snapshot, snapshotCallback);\n      \n   if (threshold === undefined) {\n      return clusters[0]; // all clustered into one\n   }\n   return clusters;\n}\n\nmodule.exports = hcluster;\n\n},{\"./distance\":2}],4:[function(require,module,exports){\nvar distances = require(\"./distance\");\n\nfunction KMeans(centroids) {\n   this.centroids = centroids || [];\n}\n\nKMeans.prototype.randomCentroids = function(points, k) {\n   var centroids = points.slice(0); // copy\n   centroids.sort(function() {\n      return (Math.round(Math.random()) - 0.5);\n   });\n   return centroids.slice(0, k);\n}\n\nKMeans.prototype.classify = function(point, distance) {\n   var min = Infinity,\n       index = 0;\n\n   distance = distance || \"euclidean\";\n   if (typeof distance == \"string\") {\n      distance = distances[distance];\n   }\n\n   for (var i = 0; i < this.centroids.length; i++) {\n      var dist = distance(point, this.centroids[i]);\n      if (dist < min) {\n         min = dist;\n         index = i;\n      }\n   }\n\n   return index;\n}\n\nKMeans.prototype.cluster = function(points, k, distance, snapshotPeriod, snapshotCb) {\n   k = k || Math.max(2, Math.ceil(Math.sqrt(points.length / 2)));\n\n   distance = distance || \"euclidean\";\n   if (typeof distance == \"string\") {\n      distance = distances[distance];\n   }\n\n   this.centroids = this.randomCentroids(points, k);\n\n   var assignment = new Array(points.length);\n   var clusters = new Array(k);\n\n   var iterations = 0;\n   var movement = true;\n   while (movement) {\n      // update point-to-centroid assignments\n      for (var i = 0; i < points.length; i++) {\n         assignment[i] = this.classify(points[i], distance);\n      }\n\n      // update location of each centroid\n      movement = false;\n      for (var j = 0; j < k; j++) {\n         var assigned = [];\n         for (var i = 0; i < assignment.length; i++) {\n            if (assignment[i] == j) {\n               assigned.push(points[i]);\n            }\n         }\n\n         if (!assigned.length) {\n            continue;\n         }\n\n         var centroid = this.centroids[j];\n         var newCentroid = new Array(centroid.length);\n\n         for (var g = 0; g < centroid.length; g++) {\n            var sum = 0;\n            for (var i = 0; i < assigned.length; i++) {\n               sum += assigned[i][g];\n            }\n            newCentroid[g] = sum / assigned.length;\n\n            if (newCentroid[g] != centroid[g]) {\n               movement = true;\n            }\n         }\n\n         this.centroids[j] = newCentroid;\n         clusters[j] = assigned;\n      }\n\n      if (snapshotCb && (iterations++ % snapshotPeriod == 0)) {\n         snapshotCb(clusters);\n      }\n   }\n\n   return clusters;\n}\n\nKMeans.prototype.toJSON = function() {\n   return JSON.stringify(this.centroids);\n}\n\nKMeans.prototype.fromJSON = function(json) {\n   this.centroids = JSON.parse(json);\n   return this;\n}\n\nmodule.exports = KMeans;\n\nmodule.exports.kmeans = function(vectors, k) {\n   return (new KMeans()).cluster(vectors, k);\n}\n},{\"./distance\":2}],5:[function(require,module,exports){\n(function (global){\n\"use strict\";\n\nmodule.exports = cluster;\n\nvar vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null),\n  clusterfck = require('clusterfck'),\n  consts = require('./clusterconsts'),\n  util = require('../util');\n\ncluster.distance = require('./distance');\n\nfunction cluster(encodings, opt) {\n  // jshint unused:false\n  var dist = cluster.distance.table(encodings);\n\n  var clusterTrees = clusterfck.hcluster(encodings, function(e1, e2) {\n    var s1 = vl.Encoding.shorthand(e1),\n      s2 = vl.Encoding.shorthand(e2);\n    return dist[s1][s2];\n  }, 'average', consts.CLUSTER_THRESHOLD);\n\n  var clusters = clusterTrees.map(function(tree) {\n      return util.traverse(tree, []);\n    })\n   .map(function(cluster) {\n    return cluster.sort(function(encoding1, encoding2) {\n      // sort each cluster -- have the highest score as 1st item\n      return encoding2._info.score - encoding1._info.score;\n    });\n  }).filter(function(cluster) {  // filter empty cluster\n    return cluster.length >0;\n  }).sort(function(cluster1, cluster2) {\n    //sort by highest scoring item in each cluster\n    return cluster2[0]._info.score - cluster1[0]._info.score;\n  });\n\n  clusters.dist = dist; //append dist in the array for debugging\n\n  return clusters;\n}\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../util\":19,\"./clusterconsts\":6,\"./distance\":7,\"clusterfck\":1}],6:[function(require,module,exports){\n'use strict';\n\nvar c = module.exports = {};\n\nc.SWAPPABLE = 0.05;\nc.DIST_MISSING = 1;\nc.CLUSTER_THRESHOLD = 1;\n\nfunction reduceTupleToTable(r, x) {\n  var a = x[0], b = x[1], d = x[2];\n  r[a] = r[a] || {};\n  r[b] = r[b] || {};\n  r[a][b] = r[b][a] = d;\n  return r;\n}\n\nc.DIST_BY_ENCTYPE = [\n  // positional\n  ['x', 'y', c.SWAPPABLE],\n  ['row', 'col', c.SWAPPABLE],\n\n  // ordinal mark properties\n  ['color', 'shape', c.SWAPPABLE],\n  ['color', 'detail', c.SWAPPABLE],\n  ['detail', 'shape', c.SWAPPABLE],\n\n  // quantitative mark properties\n  ['size', 'color', c.SWAPPABLE]\n].reduce(reduceTupleToTable, {});\n\n},{}],7:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null),\n  consts = require('./clusterconsts'),\n  util = require('../util');\n\nvar distance = {};\nmodule.exports = distance;\n\ndistance.table = function (encodings) {\n  var len = encodings.length,\n    colencs = encodings.map(function(e) { return distance.getEncTypeByColumnName(e); }),\n    shorthands = encodings.map(vl.Encoding.shorthand),\n    diff = {}, i, j;\n\n  for (i = 0; i < len; i++) diff[shorthands[i]] = {};\n\n  for (i = 0; i < len; i++) {\n    for (j = i + 1; j < len; j++) {\n      var sj = shorthands[j], si = shorthands[i];\n\n      diff[sj][si] = diff[si][sj] = distance.get(colencs[i], colencs[j]);\n    }\n  }\n  return diff;\n};\n\ndistance.get = function (colenc1, colenc2) {\n  var cols = util.union(vl.keys(colenc1.col), vl.keys(colenc2.col)),\n    dist = 0;\n\n  cols.forEach(function(col) {\n    var e1 = colenc1.col[col], e2 = colenc2.col[col];\n\n    if (e1 && e2) {\n      if (e1.encType != e2.encType) {\n        dist += (consts.DIST_BY_ENCTYPE[e1.encType] || {})[e2.encType] || 1;\n      }\n    } else {\n      dist += consts.DIST_MISSING;\n    }\n  });\n\n  // do not group stacked chart with similar non-stacked chart!\n  var isStack1 = vl.Encoding.isStack(colenc1),\n    isStack2 = vl.Encoding.isStack(colenc2);\n\n  if(isStack1 || isStack2) {\n    if(isStack1 && isStack2) {\n      if(colenc1.encoding.color.name !== colenc2.encoding.color.name) {\n        dist+=1;\n      }\n    } else {\n      dist+=1; // surely different\n    }\n  }\n  return dist;\n};\n\n// get encoding type by fieldname\ndistance.getEncTypeByColumnName = function(encoding) {\n  var _colenc = {},\n    enc = encoding.encoding;\n\n  vl.keys(enc).forEach(function(encType) {\n    var e = vl.duplicate(enc[encType]);\n    e.encType = encType;\n    _colenc[e.name || ''] = e;\n    delete e.name;\n  });\n\n  return {\n    marktype: encoding.marktype,\n    col: _colenc,\n    encoding: encoding.encoding\n  };\n};\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../util\":19,\"./clusterconsts\":6}],8:[function(require,module,exports){\n'use strict';\n\nvar consts = module.exports = {\n  gen: {},\n  cluster: {},\n  rank: {}\n};\n\nconsts.gen.projections = {\n  type: 'object',\n  properties: {\n    omitDotPlot: { //FIXME remove this!\n      type: 'boolean',\n      default: false,\n      description: 'remove all dot plots'\n    },\n    maxCardinalityForAutoAddOrdinal: {\n      type: 'integer',\n      default: 50,\n      description: 'max cardinality for ordinal field to be considered for auto adding'\n    },\n    alwaysAddHistogram: {\n      type: 'boolean',\n      default: true\n    }\n  }\n};\n\nconsts.gen.aggregates = {\n  type: 'object',\n  properties: {\n    config: {\n      type: 'object'\n    },\n    data: {\n      type: 'object'\n    },\n    tableTypes: {\n      type: 'boolean',\n      default: 'both',\n      enum: ['both', 'aggregated', 'disaggregated']\n    },\n    genDimQ: {\n      type: 'string',\n      default: 'auto',\n      enum: ['auto', 'bin', 'cast', 'none'],\n      description: 'Use Q as Dimension either by binning or casting'\n    },\n    minCardinalityForBin: {\n      type: 'integer',\n      default: 20,\n      description: 'minimum cardinality of a field if we were to bin'\n    },\n    omitDotPlot: {\n      type: 'boolean',\n      default: false,\n      description: 'remove all dot plots'\n    },\n    omitMeasureOnly: {\n      type: 'boolean',\n      default: false,\n      description: 'Omit aggregation with measure(s) only'\n    },\n    omitDimensionOnly: {\n      type: 'boolean',\n      default: true,\n      description: 'Omit aggregation with dimension(s) only'\n    },\n    addCountForDimensionOnly: {\n      type: 'boolean',\n      default: true,\n      description: 'Add count when there are dimension(s) only'\n    },\n    aggrList: {\n      type: 'array',\n      items: {\n        type: ['string']\n      },\n      default: [undefined, 'avg']\n    },\n    timeUnitList: {\n      type: 'array',\n      items: {\n        type: ['string']\n      },\n      default: ['year']\n    },\n    consistentAutoQ: {\n      type: 'boolean',\n      default: true,\n      description: \"generate similar auto transform for quant\"\n    }\n  }\n};\n\nconsts.gen.encodings = {\n  type: 'object',\n  properties: {\n    marktypeList: {\n      type: 'array',\n      items: {type: 'string'},\n      default: ['point', 'bar', 'line', 'area', 'text', 'tick'], //filled_map\n      description: 'allowed marktypes'\n    },\n    encodingTypeList: {\n      type: 'array',\n      items: {type: 'string'},\n      default: ['x', 'y', 'row', 'col', 'size', 'color', 'text', 'detail'],\n      description: 'allowed encoding types'\n    },\n    maxGoodCardinalityForFacets: {\n      type: 'integer',\n      default: 5,\n      description: 'maximum cardinality of a field to be put on facet (row/col) effectively'\n    },\n    maxCardinalityForFacets: {\n      type: 'integer',\n      default: 20,\n      description: 'maximum cardinality of a field to be put on facet (row/col)'\n    },\n    maxGoodCardinalityForColor: {\n      type: 'integer',\n      default: 7,\n      description: 'maximum cardinality of an ordinal field to be put on color effectively'\n    },\n    maxCardinalityForColor: {\n      type: 'integer',\n      default: 20,\n      description: 'maximum cardinality of an ordinal field to be put on color'\n    },\n    maxCardinalityForShape: {\n      type: 'integer',\n      default: 6,\n      description: 'maximum cardinality of an ordinal field to be put on shape'\n    },\n    omitTranpose:  {\n      type: 'boolean',\n      default: true,\n      description: 'Eliminate all transpose by (1) keeping horizontal dot plot only (2) for OxQ charts, always put O on Y (3) show only one DxD, MxM (currently sorted by name)'\n    },\n    omitDotPlot: {\n      type: 'boolean',\n      default: false,\n      description: 'remove all dot plots'\n    },\n    omitDotPlotWithExtraEncoding: {\n      type: 'boolean',\n      default: true,\n      description: 'remove all dot plots with >1 encoding'\n    },\n    omitMultipleRetinalEncodings: {\n      type: 'boolean',\n      default: true,\n      description: 'omit using multiple retinal variables (size, color, shape)'\n    },\n    omitNonTextAggrWithAllDimsOnFacets: {\n      type: 'boolean',\n      default: true,\n      description: 'remove all aggregated charts (except text tables) with all dims on facets (row, col)'\n    },\n    omitOneDimensionCount: {\n      type: 'boolean',\n      default: false,\n      description: 'omit one dimension count'\n    },\n    omitSizeOnBar: {\n      type: 'boolean',\n      default: false,\n      description: 'do not use bar\\'s size'\n    },\n    omitStackedAverage: {\n      type: 'boolean',\n      default: true,\n      description: 'do not stack bar chart with average'\n    },\n    alwaysGenerateTableAsHeatmap: {\n      type: 'boolean',\n      default: true\n    }\n  }\n};\n\n\n\n\n},{}],9:[function(require,module,exports){\nmodule.exports = {\n  consts: require('./consts'),\n  cluster: require('./cluster/cluster'),\n  gen: require('./gen/gen'),\n  rank: require('./rank/rank'),\n  util: require('./util'),\n  auto: \"-, sum\"\n};\n\n\n\n},{\"./cluster/cluster\":5,\"./consts\":8,\"./gen/gen\":13,\"./rank/rank\":17,\"./util\":19}],10:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null);\n\nvar consts = require('../consts');\n\nvar AUTO='*';\n\nmodule.exports = genAggregates;\n\nfunction genAggregates(output, fields, stats, opt) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.aggregates);\n  var tf = new Array(fields.length);\n  var hasNorO = vl.any(fields, function(f) {\n    return vl.field.isTypes(f, [N, O]);\n  });\n\n  function emit(fieldSet) {\n    fieldSet = vl.duplicate(fieldSet);\n    fieldSet.key = vl.field.shorthands(fieldSet);\n    output.push(fieldSet);\n  }\n\n  function checkAndPush() {\n    if (opt.omitMeasureOnly || opt.omitDimensionOnly) {\n      var hasMeasure = false, hasDimension = false, hasRaw = false;\n      tf.forEach(function(f) {\n        if (vl.field.isDimension(f)) {\n          hasDimension = true;\n        } else {\n          hasMeasure = true;\n          if (!f.aggregate) hasRaw = true;\n        }\n      });\n      if (!hasDimension && !hasRaw && opt.omitMeasureOnly) return;\n      if (!hasMeasure) {\n        if (opt.addCountForDimensionOnly) {\n          tf.push(vl.field.count());\n          emit(tf);\n          tf.pop();\n        }\n        if (opt.omitDimensionOnly) return;\n      }\n    }\n    if (opt.omitDotPlot && tf.length === 1) return;\n    emit(tf);\n  }\n\n  function assignAggrQ(i, hasAggr, autoMode, a) {\n    var canHaveAggr = hasAggr === true || hasAggr === null,\n      cantHaveAggr = hasAggr === false || hasAggr === null;\n    if (a) {\n      if (canHaveAggr) {\n        tf[i].aggregate = a;\n        assignField(i + 1, true, autoMode);\n        delete tf[i].aggregate;\n      }\n    } else { // if(a === undefined)\n      if (cantHaveAggr) {\n        assignField(i + 1, false, autoMode);\n      }\n    }\n  }\n\n  function assignBinQ(i, hasAggr, autoMode) {\n    tf[i].bin = true;\n    assignField(i + 1, hasAggr, autoMode);\n    delete tf[i].bin;\n  }\n\n  function assignQ(i, hasAggr, autoMode) {\n    var f = fields[i],\n      canHaveAggr = hasAggr === true || hasAggr === null;\n\n    tf[i] = {name: f.name, type: f.type};\n\n    if (f.aggregate === 'count') { // if count is included in the selected fields\n      if (canHaveAggr) {\n        tf[i].aggregate = f.aggregate;\n        assignField(i + 1, true, autoMode);\n      }\n    } else if (f._aggregate) {\n      // TODO support array of f._aggrs too\n      assignAggrQ(i, hasAggr, autoMode, f._aggregate);\n    } else if (f._raw) {\n      assignAggrQ(i, hasAggr, autoMode, undefined);\n    } else if (f._bin) {\n      assignBinQ(i, hasAggr, autoMode);\n    } else {\n      opt.aggrList.forEach(function(a) {\n        if (!opt.consistentAutoQ || autoMode === AUTO || autoMode === a) {\n          assignAggrQ(i, hasAggr, a /*assign autoMode*/, a);\n        }\n      });\n\n      if ((!opt.consistentAutoQ || vl.isin(autoMode, [AUTO, 'bin', 'cast', 'autocast'])) && !hasNorO) {\n        var highCardinality = vl.field.cardinality(f, stats) > opt.minCardinalityForBin;\n\n        var isAuto = opt.genDimQ === 'auto',\n          genBin = opt.genDimQ  === 'bin' || (isAuto && highCardinality),\n          genCast = opt.genDimQ === 'cast' || (isAuto && !highCardinality);\n\n        if (genBin && vl.isin(autoMode, [AUTO, 'bin', 'autocast'])) {\n          assignBinQ(i, hasAggr, isAuto ? 'autocast' : 'bin');\n        }\n        if (genCast && vl.isin(autoMode, [AUTO, 'cast', 'autocast'])) {\n          tf[i].type = 'O';\n          assignField(i + 1, hasAggr, isAuto ? 'autocast' : 'cast');\n          tf[i].type = 'Q';\n        }\n      }\n    }\n  }\n\n  function assignTimeUnitT(i, hasAggr, autoMode, timeUnit) {\n    tf[i].timeUnit = timeUnit;\n    assignField(i+1, hasAggr, autoMode);\n    delete tf[i].timeUnit;\n  }\n\n  function assignT(i, hasAggr, autoMode) {\n    var f = fields[i];\n    tf[i] = {name: f.name, type: f.type};\n\n    // TODO support array of f._timeUnits\n    if (f._timeUnit) {\n      assignTimeUnitT(i, hasAggr, autoMode, f._timeUnit);\n    } else {\n      opt.timeUnitList.forEach(function(timeUnit) {\n        if (timeUnit === undefined) {\n          if (!hasAggr) { // can't aggregate over raw time\n            assignField(i+1, false, autoMode);\n          }\n        } else {\n          assignTimeUnitT(i, hasAggr, autoMode, timeUnit);\n        }\n      });\n    }\n\n    // FIXME what if you aggregate time?\n  }\n\n  function assignField(i, hasAggr, autoMode) {\n    if (i === fields.length) { // If all fields are assigned\n      checkAndPush();\n      return;\n    }\n\n    var f = fields[i];\n    // Otherwise, assign i-th field\n    switch (f.type) {\n      //TODO \"D\", \"G\"\n      case Q:\n        assignQ(i, hasAggr, autoMode);\n        break;\n\n      case T:\n        assignT(i, hasAggr, autoMode);\n        break;\n      case O:\n        /* falls through */\n      case N:\n        /* falls through */\n      default:\n        tf[i] = f;\n        assignField(i + 1, hasAggr, autoMode);\n        break;\n    }\n  }\n\n  var hasAggr = opt.tableTypes === 'aggregated' ? true : opt.tableTypes === 'disaggregated' ? false : null;\n  assignField(0, hasAggr, AUTO);\n\n  return output;\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../consts\":8}],11:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null),\n  genEncs = require('./encs'),\n  getMarktypes = require('./marktypes'),\n  rank = require('../rank/rank'),\n  consts = require('../consts');\n\nmodule.exports = genEncodingsFromFields;\n\nfunction genEncodingsFromFields(output, fields, stats, opt, nested) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.encodings);\n  var encs = genEncs([], fields, stats, opt);\n\n  if (nested) {\n    return encs.reduce(function(dict, enc) {\n      dict[enc] = genEncodingsFromEncs([], enc, stats, opt);\n      return dict;\n    }, {});\n  } else {\n    return encs.reduce(function(list, enc) {\n      return genEncodingsFromEncs(list, enc, stats, opt);\n    }, []);\n  }\n}\n\nfunction genEncodingsFromEncs(output, enc, stats, opt) {\n  getMarktypes(enc, stats, opt)\n    .forEach(function(markType) {\n      var e = vl.duplicate({\n          data: opt.data,\n          marktype: markType,\n          encoding: enc,\n          config: opt.config\n        }),\n        encoding = finalTouch(e, stats, opt),\n        score = rank.encoding(encoding, stats, opt);\n\n      encoding._info = score;\n      output.push(encoding);\n    });\n  return output;\n}\n\n//FIXME this should be refactors\nfunction finalTouch(encoding, stats, opt) {\n  if (encoding.marktype === 'text' && opt.alwaysGenerateTableAsHeatmap) {\n    encoding.encoding.color = encoding.encoding.text;\n  }\n\n  // don't include zero if stdev/avg < 0.01\n  // https://github.com/uwdata/visrec/issues/69\n  var enc = encoding.encoding;\n  ['x', 'y'].forEach(function(et) {\n    var field = enc[et];\n    if (field && vl.field.isMeasure(field) && !vl.field.isCount(field)) {\n      var stat = stats[field.name];\n      if (stat && stat.stdev / stat.avg < 0.01) {\n        field.scale = {zero: false};\n      }\n    }\n  });\n  return encoding;\n}\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../consts\":8,\"../rank/rank\":17,\"./encs\":12,\"./marktypes\":14}],12:[function(require,module,exports){\n(function (global){\n\"use strict\";\nrequire('../globals');\n\nvar vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null),\n  consts = require('../consts'),\n  genMarkTypes = require('./marktypes'),\n  isDimension = vl.field.isDimension,\n  isMeasure = vl.field.isMeasure;\n\nmodule.exports = genEncs;\n\n// FIXME remove dimension, measure and use information in vega-lite instead!\nvar rules = {\n  x: {\n    dimension: true,\n    measure: true,\n    multiple: true //FIXME should allow multiple only for Q, T\n  },\n  y: {\n    dimension: true,\n    measure: true,\n    multiple: true //FIXME should allow multiple only for Q, T\n  },\n  row: {\n    dimension: true,\n    multiple: true\n  },\n  col: {\n    dimension: true,\n    multiple: true\n  },\n  shape: {\n    dimension: true,\n    rules: shapeRules\n  },\n  size: {\n    measure: true,\n    rules: retinalEncRules\n  },\n  color: {\n    dimension: true,\n    measure: true,\n    rules: colorRules\n  },\n  text: {\n    measure: true\n  },\n  detail: {\n    dimension: true\n  }\n  //geo: {\n  //  geo: true\n  //},\n  //arc: { // pie\n  //\n  //}\n};\n\nfunction retinalEncRules(enc, field, stats, opt) {\n  if (opt.omitMultipleRetinalEncodings) {\n    if (enc.color || enc.size || enc.shape) return false;\n  }\n  return true;\n}\n\nfunction colorRules(enc, field, stats, opt) {\n  if(!retinalEncRules(enc, field, stats, opt)) return false;\n\n  return vl.field.isMeasure(field) ||\n    vl.field.cardinality(field, stats) <= opt.maxCardinalityForColor;\n}\n\nfunction shapeRules(enc, field, stats, opt) {\n  if(!retinalEncRules(enc, field, stats, opt)) return false;\n\n  if (field.bin && field.type === Q) return false;\n  if (field.timeUnit && field.type === T) return false;\n  return vl.field.cardinality(field, stats) <= opt.maxCardinalityForColor;\n}\n\nfunction dimMeaTransposeRule(enc) {\n  // create horizontal histogram for ordinal\n  if (vl.field.isTypes(enc.y, [N, O]) && isMeasure(enc.x)) return true;\n\n  // vertical histogram for Q and T\n  if (isMeasure(enc.y) && (!vl.field.isTypes(enc.x, [N, O]) && isDimension(enc.x))) return true;\n\n  return false;\n}\n\nfunction generalRules(enc, stats, opt) {\n  // enc.text is only used for TEXT TABLE\n  if (enc.text) {\n    return genMarkTypes.satisfyRules(enc, TEXT, stats, opt);\n  }\n\n  // CARTESIAN PLOT OR MAP\n  if (enc.x || enc.y || enc.geo || enc.arc) {\n\n    if (enc.row || enc.col) { //have facet(s)\n\n      // don't use facets before filling up x,y\n      if (!enc.x || !enc.y) return false;\n\n      if (opt.omitNonTextAggrWithAllDimsOnFacets) {\n        // remove all aggregated charts with all dims on facets (row, col)\n        if (genEncs.isAggrWithAllDimOnFacets(enc)) return false;\n      }\n    }\n\n    if (enc.x && enc.y) {\n      var isDimX = !!isDimension(enc.x),\n        isDimY = !!isDimension(enc.y);\n\n      if (isDimX && isDimY && !vl.enc.isAggregate(enc)) {\n        // FIXME actually check if there would be occlusion #90\n        return false;\n      }\n\n      if (opt.omitTranpose) {\n        if (isDimX ^ isDimY) { // dim x mea\n          if (!dimMeaTransposeRule(enc)) return false;\n        } else if (enc.y.type===T || enc.x.type === T) {\n          if (enc.y.type===T && enc.x.type !== T) return false;\n        } else { // show only one OxO, QxQ\n          if (enc.x.name > enc.y.name) return false;\n        }\n      }\n      return true;\n    }\n\n    // DOT PLOTS\n    // // plot with one axis = dot plot\n    if (opt.omitDotPlot) return false;\n\n    // Dot plot should always be horizontal\n    if (opt.omitTranpose && enc.y) return false;\n\n    // dot plot shouldn't have other encoding\n    if (opt.omitDotPlotWithExtraEncoding && vl.keys(enc).length > 1) return false;\n\n    if (opt.omitOneDimensionCount) {\n      // one dimension \"count\"\n    if (enc.x && enc.x.aggregate == 'count' && !enc.y) return false;\n    if (enc.y && enc.y.aggregate == 'count' && !enc.x) return false;\n    }\n\n    return true;\n  }\n  return false;\n}\n\ngenEncs.isAggrWithAllDimOnFacets = function (enc) {\n  var hasAggr = false, hasOtherO = false;\n  for (var encType in enc) {\n    var field = enc[encType];\n    if (field.aggregate) {\n      hasAggr = true;\n    }\n    if (vl.field.isDimension(field) && (encType !== ROW && encType !== COL)) {\n      hasOtherO = true;\n    }\n    if (hasAggr && hasOtherO) break;\n  }\n\n  return hasAggr && !hasOtherO;\n};\n\n\nfunction genEncs(encs, fields, stats, opt) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.encodings);\n  // generate a collection vega-lite's enc\n  var tmpEnc = {};\n\n  function assignField(i) {\n    // If all fields are assigned, save\n    if (i === fields.length) {\n      // at the minimal all chart should have x, y, geo, text or arc\n      if (generalRules(tmpEnc, stats, opt)) {\n        encs.push(vl.duplicate(tmpEnc));\n      }\n      return;\n    }\n\n    // Otherwise, assign i-th field\n    var field = fields[i];\n    for (var j in opt.encodingTypeList) {\n      var et = opt.encodingTypeList[j],\n        isDim = isDimension(field);\n\n      //TODO: support \"multiple\" assignment\n      if (!(et in tmpEnc) && // encoding not used\n        ((isDim && rules[et].dimension) || (!isDim && rules[et].measure)) &&\n        (!rules[et].rules || rules[et].rules(tmpEnc, field, stats, opt))\n      ) {\n        tmpEnc[et] = field;\n        assignField(i + 1);\n        delete tmpEnc[et];\n      }\n    }\n  }\n\n  assignField(0);\n\n  return encs;\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../consts\":8,\"../globals\":16,\"./marktypes\":14}],13:[function(require,module,exports){\n'use strict';\n\nvar util = require('../util');\n\nvar gen = module.exports = {\n  // data variations\n  aggregates: require('./aggregates'),\n  projections: require('./projections'),\n  // encodings / visual variatons\n  encodings: require('./encodings'),\n  encs: require('./encs'),\n  marktypes: require('./marktypes')\n};\n\ngen.charts = function(fields, opt, cfg, flat) {\n  opt = util.gen.getOpt(opt);\n  flat = flat === undefined ? {encodings: 1} : flat;\n\n  // TODO generate\n\n  // generate permutation of encoding mappings\n  var fieldSets = opt.genAggr ? gen.aggregates([], fields, opt) : [fields],\n    encs, charts, level = 0;\n\n  if (flat === true || (flat && flat.aggregate)) {\n    encs = fieldSets.reduce(function(output, fields) {\n      return gen.encs(output, fields, opt);\n    }, []);\n  } else {\n    encs = fieldSets.map(function(fields) {\n      return gen.encs([], fields, opt);\n    }, true);\n    level += 1;\n  }\n\n  if (flat === true || (flat && flat.encodings)) {\n    charts = util.nestedReduce(encs, function(output, enc) {\n      return gen.marktypes(output, enc, opt, cfg);\n    }, level, true);\n  } else {\n    charts = util.nestedMap(encs, function(enc) {\n      return gen.marktypes([], enc, opt, cfg);\n    }, level, true);\n    level += 1;\n  }\n  return charts;\n};\n},{\"../util\":19,\"./aggregates\":10,\"./encodings\":11,\"./encs\":12,\"./marktypes\":14,\"./projections\":15}],14:[function(require,module,exports){\n(function (global){\n\"use strict\";\n\nvar vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null),\n  consts = require('../consts'),\n  isDimension = vl.field.isDimension,\n  isOrdinalScale = vl.field.isOrdinalScale;\n\nvar vlmarktypes = module.exports = getMarktypes;\n\nvar marksRule = vlmarktypes.rule = {\n  point:  pointRule,\n  bar:    barRule,\n  line:   lineRule,\n  area:   areaRule, // area is similar to line\n  text:   textRule,\n  tick:   tickRule\n};\n\nfunction getMarktypes(enc, stats, opt) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.encodings);\n\n  var markTypes = opt.marktypeList.filter(function(markType){\n    return vlmarktypes.satisfyRules(enc, markType, stats, opt);\n  });\n\n  return markTypes;\n}\n\nvlmarktypes.satisfyRules = function (enc, markType, stats, opt) {\n  var mark = vl.compiler.marks[markType],\n    reqs = mark.requiredEncoding,\n    support = mark.supportedEncoding;\n\n  for (var i in reqs) { // all required encodings in enc\n    if (!(reqs[i] in enc)) return false;\n  }\n\n  for (var encType in enc) { // all encodings in enc are supported\n    if (!support[encType]) return false;\n  }\n\n  return !marksRule[markType] || marksRule[markType](enc, stats, opt);\n};\n\nfunction facetRule(field, stats, opt) {\n  return vl.field.cardinality(field, stats) <= opt.maxCardinalityForFacets;\n}\n\nfunction facetsRule(enc, stats, opt) {\n  if(enc.row && !facetRule(enc.row, stats, opt)) return false;\n  if(enc.col && !facetRule(enc.col, stats, opt)) return false;\n  return true;\n}\n\nfunction pointRule(enc, stats, opt) {\n  if(!facetsRule(enc, stats, opt)) return false;\n  if (enc.x && enc.y) {\n    // have both x & y ==> scatter plot / bubble plot\n\n    var xIsDim = isDimension(enc.x),\n      yIsDim = isDimension(enc.y);\n\n    // For OxO\n    if (xIsDim && yIsDim) {\n      // shape doesn't work with both x, y as ordinal\n      if (enc.shape) {\n        return false;\n      }\n\n      // TODO(kanitw): check that there is quant at least ...\n      if (enc.color && isDimension(enc.color)) {\n        return false;\n      }\n    }\n\n  } else { // plot with one axis = dot plot\n    if (opt.omitDotPlot) return false;\n\n    // Dot plot should always be horizontal\n    if (opt.omitTranpose && enc.y) return false;\n\n    // dot plot shouldn't have other encoding\n    if (opt.omitDotPlotWithExtraEncoding && vl.keys(enc).length > 1) return false;\n\n    // dot plot with shape is non-sense\n    if (enc.shape) return false;\n  }\n  return true;\n}\n\nfunction tickRule(enc, stats, opt) {\n  // jshint unused:false\n  if (enc.x || enc.y) {\n    if(vl.enc.isAggregate(enc)) return false;\n\n    var xIsDim = isDimension(enc.x),\n      yIsDim = isDimension(enc.y);\n\n    return (!xIsDim && (!enc.y || isOrdinalScale(enc.y))) ||\n      (!yIsDim && (!enc.x || isOrdinalScale(enc.x)));\n  }\n  return false;\n}\n\nfunction barRule(enc, stats, opt) {\n  if(!facetsRule(enc, stats, opt)) return false;\n\n  // bar requires at least x or y\n  if (!enc.x && !enc.y) return false;\n\n  if (opt.omitSizeOnBar && enc.size !== undefined) return false;\n\n  // FIXME actually check if there would be occlusion #90\n  // need to aggregate on either x or y\n  var aggEitherXorY =\n    (!enc.x || enc.x.aggregate === undefined) ^\n    (!enc.y || enc.y.aggregate === undefined);\n\n\n  if (aggEitherXorY) {\n    var eitherXorYisDimOrNull =\n      (!enc.x || isDimension(enc.x)) ^\n      (!enc.y || isDimension(enc.y));\n\n    if (eitherXorYisDimOrNull) {\n      var aggregate = enc.x.aggregate || enc.y.aggregate;\n      return !(opt.omitStackedAverage && aggregate ==='avg' && enc.color);\n    }\n  }\n\n  return false;\n}\n\nfunction lineRule(enc, stats, opt) {\n  if(!facetsRule(enc, stats, opt)) return false;\n\n  // TODO(kanitw): add omitVerticalLine as config\n\n  // FIXME truly ordinal data is fine here too.\n  // Line chart should be only horizontal\n  // and use only temporal data\n  return enc.x.type == 'T' && enc.x.timeUnit && enc.y.type == 'Q' && enc.y.aggregate;\n}\n\nfunction areaRule(enc, stats, opt) {\n  if(!facetsRule(enc, stats, opt)) return false;\n\n  if(!lineRule(enc, stats, opt)) return false;\n\n  return !(opt.omitStackedAverage && enc.y.aggregate ==='avg' && enc.color);\n}\n\nfunction textRule(enc, stats, opt) {\n  // at least must have row or col and aggregated text values\n  return (enc.row || enc.col) && enc.text && enc.text.aggregate && !enc.x && !enc.y && !enc.size &&\n    (!opt.alwaysGenerateTableAsHeatmap || !enc.color);\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../consts\":8}],15:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar util = require('../util'),\n  consts = require('../consts'),\n  vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null),\n  isDimension = vl.field.isDimension;\n\nmodule.exports = projections;\n\n// TODO support other mode of projections generation\n// powerset, chooseK, chooseKorLess are already included in the util\n\n/**\n * fields\n * @param  {[type]} fields array of fields and query information\n * @return {[type]}        [description]\n */\nfunction projections(fields, stats, opt) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.projections);\n\n  // First categorize field, selected, fieldsToAdd, and save indices\n  var selected = [], fieldsToAdd = [], fieldSets = [],\n    hasSelectedDimension = false,\n    hasSelectedMeasure = false,\n    indices = {};\n\n  fields.forEach(function(field, index){\n    //save indices for stable sort later\n    indices[field.name] = index;\n\n    if (field.selected) {\n      selected.push(field);\n      if (isDimension(field) || field.type ==='T') { // FIXME / HACK\n        hasSelectedDimension = true;\n      } else {\n        hasSelectedMeasure = true;\n      }\n    } else if (field.selected !== false && !vl.field.isCount(field)) {\n      if (vl.field.isDimension(field) &&\n          !opt.maxCardinalityForAutoAddOrdinal &&\n          vl.field.cardinality(field, stats, 15) > opt.maxCardinalityForAutoAddOrdinal\n        ) {\n        return;\n      }\n      fieldsToAdd.push(field);\n    }\n  });\n\n  fieldsToAdd.sort(compareFieldsToAdd(hasSelectedDimension, hasSelectedMeasure, indices));\n\n  var setsToAdd = util.chooseKorLess(fieldsToAdd, 1);\n\n  setsToAdd.forEach(function(setToAdd) {\n    var fieldSet = selected.concat(setToAdd);\n    if (fieldSet.length > 0) {\n      if (opt.omitDotPlot && fieldSet.length === 1) return;\n      fieldSets.push(fieldSet);\n    }\n  });\n\n  fieldSets.forEach(function(fieldSet) {\n      // always append projection's key to each projection returned, d3 style.\n    fieldSet.key = projections.key(fieldSet);\n  });\n\n  return fieldSets;\n}\n\nvar typeIsMeasureScore = {\n  N: 0,\n  O: 0,\n  T: 2,\n  Q: 3\n};\n\nfunction compareFieldsToAdd(hasSelectedDimension, hasSelectedMeasure, indices) {\n  return function(a, b){\n    // sort by type of the data\n    if (a.type !== b.type) {\n      if (!hasSelectedDimension) {\n        return typeIsMeasureScore[a.type] - typeIsMeasureScore[b.type];\n      } else { //if (!hasSelectedMeasure) {\n        return typeIsMeasureScore[b.type] - typeIsMeasureScore[a.type];\n      }\n    }\n    //make the sort stable\n    return indices[a.name] - indices[b.name];\n  };\n}\n\nprojections.key = function(projection) {\n  return projection.map(function(field) {\n    return vl.field.isCount(field) ? 'count' : field.name;\n  }).join(',');\n};\n\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../consts\":8,\"../util\":19}],16:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar g = global || window;\n\nrequire('vega-lite/src/globals');\n\ng.CHART_TYPES = {\n  TABLE: 'TABLE',\n  BAR: 'BAR',\n  PLOT: 'PLOT',\n  LINE: 'LINE',\n  AREA: 'AREA',\n  MAP: 'MAP',\n  HISTOGRAM: 'HISTOGRAM'\n};\n\ng.ANY_DATA_TYPES = (1 << 4) - 1;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"vega-lite/src/globals\":20}],17:[function(require,module,exports){\nmodule.exports = {\n  encoding: require('./rankEncodings')\n};\n\n\n\n},{\"./rankEncodings\":18}],18:[function(require,module,exports){\n(function (global){\n'use strict';\n\nrequire('../globals');\n\nvar vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null),\n  isDimension = vl.field.isDimension;\n\nmodule.exports = rankEncodings;\n\n// bad score not specified in the table above\nvar UNUSED_POSITION = 0.5;\n\nvar MARK_SCORE = {\n  line: 0.99,\n  area: 0.98,\n  bar: 0.97,\n  tick: 0.96,\n  point: 0.95,\n  circle: 0.94,\n  square: 0.94,\n  text: 0.8\n};\n\nfunction rankEncodings(encoding, stats, opt, selected) {\n  var features = [],\n    encTypes = vl.keys(encoding.encoding),\n    marktype = encoding.marktype,\n    enc = encoding.encoding;\n\n  var encodingMappingByField = vl.enc.reduce(encoding.encoding, function(o, field, encType) {\n    var key = vl.field.shorthand(field);\n    var mappings = o[key] = o[key] || [];\n    mappings.push({encType: encType, field: field});\n    return o;\n  }, {});\n\n  // data - encoding mapping score\n  vl.forEach(encodingMappingByField, function(mappings) {\n    var reasons = mappings.map(function(m) {\n        return m.encType + vl.shorthand.assign + vl.field.shorthand(m.field) +\n          ' ' + (selected && selected[m.field.name] ? '[x]' : '[ ]');\n      }),\n      scores = mappings.map(function(m) {\n        var role = vl.field.isDimension(m.field) ? 'dimension' : 'measure';\n\n        var score = rankEncodings.score[role](m.field, m.encType, encoding.marktype, stats, opt);\n\n        return !selected || selected[m.field.name] ? score : Math.pow(score, 0.125);\n      });\n\n    features.push({\n      reason: reasons.join(\" | \"),\n      score: Math.max.apply(null, scores)\n    });\n  });\n\n  // plot type\n  if (marktype === TEXT) {\n    // TODO\n  } else {\n    if (enc.x && enc.y) {\n      if (isDimension(enc.x) ^ isDimension(enc.y)) {\n        features.push({\n          reason: 'OxQ plot',\n          score: 0.8\n        });\n      }\n    }\n  }\n\n  // penalize not using positional only penalize for non-text\n  if (encTypes.length > 1 && marktype !== TEXT) {\n    if ((!enc.x || !enc.y) && !enc.geo && !enc.text) {\n      features.push({\n        reason: 'unused position',\n        score: UNUSED_POSITION\n      });\n    }\n  }\n\n  // mark type score\n  features.push({\n    reason: 'marktype='+marktype,\n    score: MARK_SCORE[marktype]\n  });\n\n  return {\n    score: features.reduce(function(p, f) {\n      return p * f.score;\n    }, 1),\n    features: features\n  };\n}\n\n\nvar D = {}, M = {}, BAD = 0.1, TERRIBLE = 0.01;\n\nD.minor = 0.01;\nD.pos = 1;\nD.Y_T = 0.8;\nD.facet_text = 1;\nD.facet_good = 0.675; // < color_ok, > color_bad\nD.facet_ok = 0.55;\nD.facet_bad = 0.4;\nD.color_good = 0.7;\nD.color_ok = 0.65; // > M.Size\nD.color_bad = 0.3;\nD.color_stack = 0.6;\nD.shape = 0.6;\nD.detail = 0.5;\nD.bad = BAD;\nD.terrible = TERRIBLE;\n\nM.pos = 1;\nM.size = 0.6;\nM.color = 0.5;\nM.text = 0.4;\nM.bad = BAD;\nM.terrible = TERRIBLE;\n\nrankEncodings.dimensionScore = function (field, encType, marktype, stats, opt){\n  var cardinality = vl.field.cardinality(field, stats);\n  switch (encType) {\n    case X:\n      if (vl.field.isTypes(field, [N, O]))  return D.pos - D.minor;\n      return D.pos;\n\n    case Y:\n      if (vl.field.isTypes(field, [N, O])) return D.pos - D.minor; //prefer ordinal on y\n      if(field.type === T) return D.Y_T; // time should not be on Y\n      return D.pos - D.minor;\n\n    case COL:\n      if (marktype === TEXT) return D.facet_text;\n      //prefer column over row due to scrolling issues\n      return cardinality <= opt.maxGoodCardinalityForFacets ? D.facet_good :\n        cardinality <= opt.maxCardinalityForFacets ? D.facet_ok : D.facet_bad;\n\n    case ROW:\n      if (marktype === TEXT) return D.facet_text;\n      return (cardinality <= opt.maxGoodCardinalityForFacets ? D.facet_good :\n        cardinality <= opt.maxCardinalityForFacets ? D.facet_ok : D.facet_bad) - D.minor;\n\n    case COLOR:\n      var hasOrder = (field.bin && field.type===Q) || (field.timeUnit && field.type===T);\n\n      //FIXME add stacking option once we have control ..\n      var isStacked = marktype === 'bar' || marktype === 'area';\n\n      // true ordinal on color is currently BAD (until we have good ordinal color scale support)\n      if (hasOrder) return D.color_bad;\n\n      //stacking gets lower score\n      if (isStacked) return D.color_stack;\n\n      return cardinality <= opt.maxGoodCardinalityForColor ? D.color_good: cardinality <= opt.maxCardinalityForColor ? D.color_ok : D.color_bad;\n    case SHAPE:\n      return cardinality <= opt.maxCardinalityForShape ? D.shape : TERRIBLE;\n    case DETAIL:\n      return D.detail;\n  }\n  return TERRIBLE;\n};\n\nrankEncodings.dimensionScore.consts = D;\n\nrankEncodings.measureScore = function (field, encType, marktype, stats, opt) {\n  // jshint unused:false\n  switch (encType){\n    case X: return M.pos;\n    case Y: return M.pos;\n    case SIZE:\n      if (marktype === 'bar') return BAD; //size of bar is very bad\n      if (marktype === TEXT) return BAD;\n      if (marktype === 'line') return BAD;\n      return M.size;\n    case COLOR: return M.color;\n    case TEXT: return M.text;\n  }\n  return BAD;\n};\n\nrankEncodings.measureScore.consts = M;\n\n\nrankEncodings.score = {\n  dimension: rankEncodings.dimensionScore,\n  measure: rankEncodings.measureScore,\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../globals\":16}],19:[function(require,module,exports){\n\"use strict\";\n\nvar consts = require('./consts');\n\nvar util = module.exports = {\n  gen: {}\n};\n\nutil.isArray = Array.isArray || function (obj) {\n  return {}.toString.call(obj) == '[object Array]';\n};\n\nutil.json = function(s, sp) {\n  return JSON.stringify(s, null, sp);\n};\n\nutil.keys = function(obj) {\n  var k = [], x;\n  for (x in obj) k.push(x);\n  return k;\n};\n\nutil.nestedMap = function (col, f, level, filter) {\n  return level === 0 ?\n    col.map(f) :\n    col.map(function(v) {\n      var r = util.nestedMap(v, f, level - 1);\n      return filter ? r.filter(util.nonEmpty) : r;\n    });\n};\n\nutil.nestedReduce = function (col, f, level, filter) {\n  return level === 0 ?\n    col.reduce(f, []) :\n    col.map(function(v) {\n      var r = util.nestedReduce(v, f, level - 1);\n      return filter ? r.filter(util.nonEmpty) : r;\n    });\n};\n\nutil.nonEmpty = function(grp) {\n  return !util.isArray(grp) || grp.length > 0;\n};\n\n\nutil.traverse = function (node, arr) {\n  if (node.value !== undefined) {\n    arr.push(node.value);\n  } else {\n    if (node.left) util.traverse(node.left, arr);\n    if (node.right) util.traverse(node.right, arr);\n  }\n  return arr;\n};\n\nutil.union = function (a, b) {\n  var o = {};\n  a.forEach(function(x) { o[x] = true;});\n  b.forEach(function(x) { o[x] = true;});\n  return util.keys(o);\n};\n\n\nutil.gen.getOpt = function (opt) {\n  //merge with default\n  return (opt ? util.keys(opt) : []).reduce(function(c, k) {\n    c[k] = opt[k];\n    return c;\n  }, Object.create(consts.gen.DEFAULT_OPT));\n};\n\n/**\n * powerset code from http://rosettacode.org/wiki/Power_Set#JavaScript\n *\n *   var res = powerset([1,2,3,4]);\n *\n * returns\n *\n * [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],\n * [2,4],[1,2,4],[3,4],[1,3,4],[2,3,4],[1,2,3,4]]\n[edit]\n*/\n\nutil.powerset = function(list) {\n  var ps = [\n    []\n  ];\n  for (var i = 0; i < list.length; i++) {\n    for (var j = 0, len = ps.length; j < len; j++) {\n      ps.push(ps[j].concat(list[i]));\n    }\n  }\n  return ps;\n};\n\nutil.chooseKorLess = function(list, k) {\n  var subset = [[]];\n  for (var i = 0; i < list.length; i++) {\n    for (var j = 0, len = subset.length; j < len; j++) {\n      var sub = subset[j].concat(list[i]);\n      if(sub.length <= k){\n        subset.push(sub);\n      }\n    }\n  }\n  return subset;\n};\n\nutil.chooseK = function(list, k) {\n  var subset = [[]];\n  var kArray =[];\n  for (var i = 0; i < list.length; i++) {\n    for (var j = 0, len = subset.length; j < len; j++) {\n      var sub = subset[j].concat(list[i]);\n      if(sub.length < k){\n        subset.push(sub);\n      }else if (sub.length === k){\n        kArray.push(sub);\n      }\n    }\n  }\n  return kArray;\n};\n\nutil.cross = function(a,b){\n  var x = [];\n  for(var i=0; i< a.length; i++){\n    for(var j=0;j< b.length; j++){\n      x.push(a[i].concat(b[j]));\n    }\n  }\n  return x;\n};\n\n\n},{\"./consts\":8}],20:[function(require,module,exports){\n(function (global){\n'use strict';\n\n// declare global constant\nvar g = global || window;\n\ng.TABLE = 'table';\ng.RAW = 'raw';\ng.STACKED = 'stacked';\ng.INDEX = 'index';\n\ng.X = 'x';\ng.Y = 'y';\ng.ROW = 'row';\ng.COL = 'col';\ng.SIZE = 'size';\ng.SHAPE = 'shape';\ng.COLOR = 'color';\ng.TEXT = 'text';\ng.DETAIL = 'detail';\n\ng.N = 'N';\ng.O = 'O';\ng.Q = 'Q';\ng.T = 'T';\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}]},{},[9])(9)\n});\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n","module.exports = {\n  euclidean: function(v1, v2) {\n      var total = 0;\n      for (var i = 0; i < v1.length; i++) {\n         total += Math.pow(v2[i] - v1[i], 2);      \n      }\n      return Math.sqrt(total);\n   },\n   manhattan: function(v1, v2) {\n     var total = 0;\n     for (var i = 0; i < v1.length ; i++) {\n        total += Math.abs(v2[i] - v1[i]);      \n     }\n     return total;\n   },\n   max: function(v1, v2) {\n     var max = 0;\n     for (var i = 0; i < v1.length; i++) {\n        max = Math.max(max , Math.abs(v2[i] - v1[i]));      \n     }\n     return max;\n   }\n};","var distances = require(\"./distance\");\n\nvar HierarchicalClustering = function(distance, linkage, threshold) {\n   this.distance = distance;\n   this.linkage = linkage;\n   this.threshold = threshold == undefined ? Infinity : threshold;\n}\n\nHierarchicalClustering.prototype = {\n   cluster : function(items, snapshotPeriod, snapshotCb) {\n      this.clusters = [];\n      this.dists = [];  // distances between each pair of clusters\n      this.mins = []; // closest cluster for each cluster\n      this.index = []; // keep a hash of all clusters by key\n      \n      for (var i = 0; i < items.length; i++) {\n         var cluster = {\n            value: items[i],\n            key: i,\n            index: i,\n            size: 1\n         };\n         this.clusters[i] = cluster;\n         this.index[i] = cluster;\n         this.dists[i] = [];\n         this.mins[i] = 0;\n      }\n\n      for (var i = 0; i < this.clusters.length; i++) {\n         for (var j = 0; j <= i; j++) {\n            var dist = (i == j) ? Infinity : \n               this.distance(this.clusters[i].value, this.clusters[j].value);\n            this.dists[i][j] = dist;\n            this.dists[j][i] = dist;\n\n            if (dist < this.dists[i][this.mins[i]]) {\n               this.mins[i] = j;               \n            }\n         }\n      }\n\n      var merged = this.mergeClosest();\n      var i = 0;\n      while (merged) {\n        if (snapshotCb && (i++ % snapshotPeriod) == 0) {\n           snapshotCb(this.clusters);           \n        }\n        merged = this.mergeClosest();\n      }\n    \n      this.clusters.forEach(function(cluster) {\n        // clean up metadata used for clustering\n        delete cluster.key;\n        delete cluster.index;\n      });\n\n      return this.clusters;\n   },\n  \n   mergeClosest: function() {\n      // find two closest clusters from cached mins\n      var minKey = 0, min = Infinity;\n      for (var i = 0; i < this.clusters.length; i++) {\n         var key = this.clusters[i].key,\n             dist = this.dists[key][this.mins[key]];\n         if (dist < min) {\n            minKey = key;\n            min = dist;\n         }\n      }\n      if (min >= this.threshold) {\n         return false;         \n      }\n\n      var c1 = this.index[minKey],\n          c2 = this.index[this.mins[minKey]];\n\n      // merge two closest clusters\n      var merged = {\n         left: c1,\n         right: c2,\n         key: c1.key,\n         size: c1.size + c2.size\n      };\n\n      this.clusters[c1.index] = merged;\n      this.clusters.splice(c2.index, 1);\n      this.index[c1.key] = merged;\n\n      // update distances with new merged cluster\n      for (var i = 0; i < this.clusters.length; i++) {\n         var ci = this.clusters[i];\n         var dist;\n         if (c1.key == ci.key) {\n            dist = Infinity;            \n         }\n         else if (this.linkage == \"single\") {\n            dist = this.dists[c1.key][ci.key];\n            if (this.dists[c1.key][ci.key] > this.dists[c2.key][ci.key]) {\n               dist = this.dists[c2.key][ci.key];\n            }\n         }\n         else if (this.linkage == \"complete\") {\n            dist = this.dists[c1.key][ci.key];\n            if (this.dists[c1.key][ci.key] < this.dists[c2.key][ci.key]) {\n               dist = this.dists[c2.key][ci.key];              \n            }\n         }\n         else if (this.linkage == \"average\") {\n            dist = (this.dists[c1.key][ci.key] * c1.size\n                   + this.dists[c2.key][ci.key] * c2.size) / (c1.size + c2.size);\n         }\n         else {\n            dist = this.distance(ci.value, c1.value);            \n         }\n\n         this.dists[c1.key][ci.key] = this.dists[ci.key][c1.key] = dist;\n      }\n\n    \n      // update cached mins\n      for (var i = 0; i < this.clusters.length; i++) {\n         var key1 = this.clusters[i].key;        \n         if (this.mins[key1] == c1.key || this.mins[key1] == c2.key) {\n            var min = key1;\n            for (var j = 0; j < this.clusters.length; j++) {\n               var key2 = this.clusters[j].key;\n               if (this.dists[key1][key2] < this.dists[key1][min]) {\n                  min = key2;                  \n               }\n            }\n            this.mins[key1] = min;\n         }\n         this.clusters[i].index = i;\n      }\n    \n      // clean up metadata used for clustering\n      delete c1.key; delete c2.key;\n      delete c1.index; delete c2.index;\n\n      return true;\n   }\n}\n\nvar hcluster = function(items, distance, linkage, threshold, snapshot, snapshotCallback) {\n   distance = distance || \"euclidean\";\n   linkage = linkage || \"average\";\n\n   if (typeof distance == \"string\") {\n     distance = distances[distance];\n   }\n   var clusters = (new HierarchicalClustering(distance, linkage, threshold))\n                  .cluster(items, snapshot, snapshotCallback);\n      \n   if (threshold === undefined) {\n      return clusters[0]; // all clustered into one\n   }\n   return clusters;\n}\n\nmodule.exports = hcluster;\n","var distances = require(\"./distance\");\n\nfunction KMeans(centroids) {\n   this.centroids = centroids || [];\n}\n\nKMeans.prototype.randomCentroids = function(points, k) {\n   var centroids = points.slice(0); // copy\n   centroids.sort(function() {\n      return (Math.round(Math.random()) - 0.5);\n   });\n   return centroids.slice(0, k);\n}\n\nKMeans.prototype.classify = function(point, distance) {\n   var min = Infinity,\n       index = 0;\n\n   distance = distance || \"euclidean\";\n   if (typeof distance == \"string\") {\n      distance = distances[distance];\n   }\n\n   for (var i = 0; i < this.centroids.length; i++) {\n      var dist = distance(point, this.centroids[i]);\n      if (dist < min) {\n         min = dist;\n         index = i;\n      }\n   }\n\n   return index;\n}\n\nKMeans.prototype.cluster = function(points, k, distance, snapshotPeriod, snapshotCb) {\n   k = k || Math.max(2, Math.ceil(Math.sqrt(points.length / 2)));\n\n   distance = distance || \"euclidean\";\n   if (typeof distance == \"string\") {\n      distance = distances[distance];\n   }\n\n   this.centroids = this.randomCentroids(points, k);\n\n   var assignment = new Array(points.length);\n   var clusters = new Array(k);\n\n   var iterations = 0;\n   var movement = true;\n   while (movement) {\n      // update point-to-centroid assignments\n      for (var i = 0; i < points.length; i++) {\n         assignment[i] = this.classify(points[i], distance);\n      }\n\n      // update location of each centroid\n      movement = false;\n      for (var j = 0; j < k; j++) {\n         var assigned = [];\n         for (var i = 0; i < assignment.length; i++) {\n            if (assignment[i] == j) {\n               assigned.push(points[i]);\n            }\n         }\n\n         if (!assigned.length) {\n            continue;\n         }\n\n         var centroid = this.centroids[j];\n         var newCentroid = new Array(centroid.length);\n\n         for (var g = 0; g < centroid.length; g++) {\n            var sum = 0;\n            for (var i = 0; i < assigned.length; i++) {\n               sum += assigned[i][g];\n            }\n            newCentroid[g] = sum / assigned.length;\n\n            if (newCentroid[g] != centroid[g]) {\n               movement = true;\n            }\n         }\n\n         this.centroids[j] = newCentroid;\n         clusters[j] = assigned;\n      }\n\n      if (snapshotCb && (iterations++ % snapshotPeriod == 0)) {\n         snapshotCb(clusters);\n      }\n   }\n\n   return clusters;\n}\n\nKMeans.prototype.toJSON = function() {\n   return JSON.stringify(this.centroids);\n}\n\nKMeans.prototype.fromJSON = function(json) {\n   this.centroids = JSON.parse(json);\n   return this;\n}\n\nmodule.exports = KMeans;\n\nmodule.exports.kmeans = function(vectors, k) {\n   return (new KMeans()).cluster(vectors, k);\n}","\"use strict\";\n\nmodule.exports = cluster;\n\nvar vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null),\n  clusterfck = require('clusterfck'),\n  consts = require('./clusterconsts'),\n  util = require('../util');\n\ncluster.distance = require('./distance');\n\nfunction cluster(encodings, opt) {\n  // jshint unused:false\n  var dist = cluster.distance.table(encodings);\n\n  var clusterTrees = clusterfck.hcluster(encodings, function(e1, e2) {\n    var s1 = vl.Encoding.shorthand(e1),\n      s2 = vl.Encoding.shorthand(e2);\n    return dist[s1][s2];\n  }, 'average', consts.CLUSTER_THRESHOLD);\n\n  var clusters = clusterTrees.map(function(tree) {\n      return util.traverse(tree, []);\n    })\n   .map(function(cluster) {\n    return cluster.sort(function(encoding1, encoding2) {\n      // sort each cluster -- have the highest score as 1st item\n      return encoding2._info.score - encoding1._info.score;\n    });\n  }).filter(function(cluster) {  // filter empty cluster\n    return cluster.length >0;\n  }).sort(function(cluster1, cluster2) {\n    //sort by highest scoring item in each cluster\n    return cluster2[0]._info.score - cluster1[0]._info.score;\n  });\n\n  clusters.dist = dist; //append dist in the array for debugging\n\n  return clusters;\n}","'use strict';\n\nvar c = module.exports = {};\n\nc.SWAPPABLE = 0.05;\nc.DIST_MISSING = 1;\nc.CLUSTER_THRESHOLD = 1;\n\nfunction reduceTupleToTable(r, x) {\n  var a = x[0], b = x[1], d = x[2];\n  r[a] = r[a] || {};\n  r[b] = r[b] || {};\n  r[a][b] = r[b][a] = d;\n  return r;\n}\n\nc.DIST_BY_ENCTYPE = [\n  // positional\n  ['x', 'y', c.SWAPPABLE],\n  ['row', 'col', c.SWAPPABLE],\n\n  // ordinal mark properties\n  ['color', 'shape', c.SWAPPABLE],\n  ['color', 'detail', c.SWAPPABLE],\n  ['detail', 'shape', c.SWAPPABLE],\n\n  // quantitative mark properties\n  ['size', 'color', c.SWAPPABLE]\n].reduce(reduceTupleToTable, {});\n","'use strict';\n\nvar vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null),\n  consts = require('./clusterconsts'),\n  util = require('../util');\n\nvar distance = {};\nmodule.exports = distance;\n\ndistance.table = function (encodings) {\n  var len = encodings.length,\n    colencs = encodings.map(function(e) { return distance.getEncTypeByColumnName(e); }),\n    shorthands = encodings.map(vl.Encoding.shorthand),\n    diff = {}, i, j;\n\n  for (i = 0; i < len; i++) diff[shorthands[i]] = {};\n\n  for (i = 0; i < len; i++) {\n    for (j = i + 1; j < len; j++) {\n      var sj = shorthands[j], si = shorthands[i];\n\n      diff[sj][si] = diff[si][sj] = distance.get(colencs[i], colencs[j]);\n    }\n  }\n  return diff;\n};\n\ndistance.get = function (colenc1, colenc2) {\n  var cols = util.union(vl.keys(colenc1.col), vl.keys(colenc2.col)),\n    dist = 0;\n\n  cols.forEach(function(col) {\n    var e1 = colenc1.col[col], e2 = colenc2.col[col];\n\n    if (e1 && e2) {\n      if (e1.encType != e2.encType) {\n        dist += (consts.DIST_BY_ENCTYPE[e1.encType] || {})[e2.encType] || 1;\n      }\n    } else {\n      dist += consts.DIST_MISSING;\n    }\n  });\n\n  // do not group stacked chart with similar non-stacked chart!\n  var isStack1 = vl.Encoding.isStack(colenc1),\n    isStack2 = vl.Encoding.isStack(colenc2);\n\n  if(isStack1 || isStack2) {\n    if(isStack1 && isStack2) {\n      if(colenc1.encoding.color.name !== colenc2.encoding.color.name) {\n        dist+=1;\n      }\n    } else {\n      dist+=1; // surely different\n    }\n  }\n  return dist;\n};\n\n// get encoding type by fieldname\ndistance.getEncTypeByColumnName = function(encoding) {\n  var _colenc = {},\n    enc = encoding.encoding;\n\n  vl.keys(enc).forEach(function(encType) {\n    var e = vl.duplicate(enc[encType]);\n    e.encType = encType;\n    _colenc[e.name || ''] = e;\n    delete e.name;\n  });\n\n  return {\n    marktype: encoding.marktype,\n    col: _colenc,\n    encoding: encoding.encoding\n  };\n};","'use strict';\n\nvar consts = module.exports = {\n  gen: {},\n  cluster: {},\n  rank: {}\n};\n\nconsts.gen.projections = {\n  type: 'object',\n  properties: {\n    omitDotPlot: { //FIXME remove this!\n      type: 'boolean',\n      default: false,\n      description: 'remove all dot plots'\n    },\n    maxCardinalityForAutoAddOrdinal: {\n      type: 'integer',\n      default: 50,\n      description: 'max cardinality for ordinal field to be considered for auto adding'\n    },\n    alwaysAddHistogram: {\n      type: 'boolean',\n      default: true\n    }\n  }\n};\n\nconsts.gen.aggregates = {\n  type: 'object',\n  properties: {\n    config: {\n      type: 'object'\n    },\n    data: {\n      type: 'object'\n    },\n    tableTypes: {\n      type: 'boolean',\n      default: 'both',\n      enum: ['both', 'aggregated', 'disaggregated']\n    },\n    genDimQ: {\n      type: 'string',\n      default: 'auto',\n      enum: ['auto', 'bin', 'cast', 'none'],\n      description: 'Use Q as Dimension either by binning or casting'\n    },\n    minCardinalityForBin: {\n      type: 'integer',\n      default: 20,\n      description: 'minimum cardinality of a field if we were to bin'\n    },\n    omitDotPlot: {\n      type: 'boolean',\n      default: false,\n      description: 'remove all dot plots'\n    },\n    omitMeasureOnly: {\n      type: 'boolean',\n      default: false,\n      description: 'Omit aggregation with measure(s) only'\n    },\n    omitDimensionOnly: {\n      type: 'boolean',\n      default: true,\n      description: 'Omit aggregation with dimension(s) only'\n    },\n    addCountForDimensionOnly: {\n      type: 'boolean',\n      default: true,\n      description: 'Add count when there are dimension(s) only'\n    },\n    aggrList: {\n      type: 'array',\n      items: {\n        type: ['string']\n      },\n      default: [undefined, 'avg']\n    },\n    timeUnitList: {\n      type: 'array',\n      items: {\n        type: ['string']\n      },\n      default: ['year']\n    },\n    consistentAutoQ: {\n      type: 'boolean',\n      default: true,\n      description: \"generate similar auto transform for quant\"\n    }\n  }\n};\n\nconsts.gen.encodings = {\n  type: 'object',\n  properties: {\n    marktypeList: {\n      type: 'array',\n      items: {type: 'string'},\n      default: ['point', 'bar', 'line', 'area', 'text', 'tick'], //filled_map\n      description: 'allowed marktypes'\n    },\n    encodingTypeList: {\n      type: 'array',\n      items: {type: 'string'},\n      default: ['x', 'y', 'row', 'col', 'size', 'color', 'text', 'detail'],\n      description: 'allowed encoding types'\n    },\n    maxGoodCardinalityForFacets: {\n      type: 'integer',\n      default: 5,\n      description: 'maximum cardinality of a field to be put on facet (row/col) effectively'\n    },\n    maxCardinalityForFacets: {\n      type: 'integer',\n      default: 20,\n      description: 'maximum cardinality of a field to be put on facet (row/col)'\n    },\n    maxGoodCardinalityForColor: {\n      type: 'integer',\n      default: 7,\n      description: 'maximum cardinality of an ordinal field to be put on color effectively'\n    },\n    maxCardinalityForColor: {\n      type: 'integer',\n      default: 20,\n      description: 'maximum cardinality of an ordinal field to be put on color'\n    },\n    maxCardinalityForShape: {\n      type: 'integer',\n      default: 6,\n      description: 'maximum cardinality of an ordinal field to be put on shape'\n    },\n    omitTranpose:  {\n      type: 'boolean',\n      default: true,\n      description: 'Eliminate all transpose by (1) keeping horizontal dot plot only (2) for OxQ charts, always put O on Y (3) show only one DxD, MxM (currently sorted by name)'\n    },\n    omitDotPlot: {\n      type: 'boolean',\n      default: false,\n      description: 'remove all dot plots'\n    },\n    omitDotPlotWithExtraEncoding: {\n      type: 'boolean',\n      default: true,\n      description: 'remove all dot plots with >1 encoding'\n    },\n    omitMultipleRetinalEncodings: {\n      type: 'boolean',\n      default: true,\n      description: 'omit using multiple retinal variables (size, color, shape)'\n    },\n    omitNonTextAggrWithAllDimsOnFacets: {\n      type: 'boolean',\n      default: true,\n      description: 'remove all aggregated charts (except text tables) with all dims on facets (row, col)'\n    },\n    omitOneDimensionCount: {\n      type: 'boolean',\n      default: false,\n      description: 'omit one dimension count'\n    },\n    omitSizeOnBar: {\n      type: 'boolean',\n      default: false,\n      description: 'do not use bar\\'s size'\n    },\n    omitStackedAverage: {\n      type: 'boolean',\n      default: true,\n      description: 'do not stack bar chart with average'\n    },\n    alwaysGenerateTableAsHeatmap: {\n      type: 'boolean',\n      default: true\n    }\n  }\n};\n\n\n\n","module.exports = {\n  consts: require('./consts'),\n  cluster: require('./cluster/cluster'),\n  gen: require('./gen/gen'),\n  rank: require('./rank/rank'),\n  util: require('./util'),\n  auto: \"-, sum\"\n};\n\n\n","'use strict';\n\nvar vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null);\n\nvar consts = require('../consts');\n\nvar AUTO='*';\n\nmodule.exports = genAggregates;\n\nfunction genAggregates(output, fields, stats, opt) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.aggregates);\n  var tf = new Array(fields.length);\n  var hasNorO = vl.any(fields, function(f) {\n    return vl.field.isTypes(f, [N, O]);\n  });\n\n  function emit(fieldSet) {\n    fieldSet = vl.duplicate(fieldSet);\n    fieldSet.key = vl.field.shorthands(fieldSet);\n    output.push(fieldSet);\n  }\n\n  function checkAndPush() {\n    if (opt.omitMeasureOnly || opt.omitDimensionOnly) {\n      var hasMeasure = false, hasDimension = false, hasRaw = false;\n      tf.forEach(function(f) {\n        if (vl.field.isDimension(f)) {\n          hasDimension = true;\n        } else {\n          hasMeasure = true;\n          if (!f.aggregate) hasRaw = true;\n        }\n      });\n      if (!hasDimension && !hasRaw && opt.omitMeasureOnly) return;\n      if (!hasMeasure) {\n        if (opt.addCountForDimensionOnly) {\n          tf.push(vl.field.count());\n          emit(tf);\n          tf.pop();\n        }\n        if (opt.omitDimensionOnly) return;\n      }\n    }\n    if (opt.omitDotPlot && tf.length === 1) return;\n    emit(tf);\n  }\n\n  function assignAggrQ(i, hasAggr, autoMode, a) {\n    var canHaveAggr = hasAggr === true || hasAggr === null,\n      cantHaveAggr = hasAggr === false || hasAggr === null;\n    if (a) {\n      if (canHaveAggr) {\n        tf[i].aggregate = a;\n        assignField(i + 1, true, autoMode);\n        delete tf[i].aggregate;\n      }\n    } else { // if(a === undefined)\n      if (cantHaveAggr) {\n        assignField(i + 1, false, autoMode);\n      }\n    }\n  }\n\n  function assignBinQ(i, hasAggr, autoMode) {\n    tf[i].bin = true;\n    assignField(i + 1, hasAggr, autoMode);\n    delete tf[i].bin;\n  }\n\n  function assignQ(i, hasAggr, autoMode) {\n    var f = fields[i],\n      canHaveAggr = hasAggr === true || hasAggr === null;\n\n    tf[i] = {name: f.name, type: f.type};\n\n    if (f.aggregate === 'count') { // if count is included in the selected fields\n      if (canHaveAggr) {\n        tf[i].aggregate = f.aggregate;\n        assignField(i + 1, true, autoMode);\n      }\n    } else if (f._aggregate) {\n      // TODO support array of f._aggrs too\n      assignAggrQ(i, hasAggr, autoMode, f._aggregate);\n    } else if (f._raw) {\n      assignAggrQ(i, hasAggr, autoMode, undefined);\n    } else if (f._bin) {\n      assignBinQ(i, hasAggr, autoMode);\n    } else {\n      opt.aggrList.forEach(function(a) {\n        if (!opt.consistentAutoQ || autoMode === AUTO || autoMode === a) {\n          assignAggrQ(i, hasAggr, a /*assign autoMode*/, a);\n        }\n      });\n\n      if ((!opt.consistentAutoQ || vl.isin(autoMode, [AUTO, 'bin', 'cast', 'autocast'])) && !hasNorO) {\n        var highCardinality = vl.field.cardinality(f, stats) > opt.minCardinalityForBin;\n\n        var isAuto = opt.genDimQ === 'auto',\n          genBin = opt.genDimQ  === 'bin' || (isAuto && highCardinality),\n          genCast = opt.genDimQ === 'cast' || (isAuto && !highCardinality);\n\n        if (genBin && vl.isin(autoMode, [AUTO, 'bin', 'autocast'])) {\n          assignBinQ(i, hasAggr, isAuto ? 'autocast' : 'bin');\n        }\n        if (genCast && vl.isin(autoMode, [AUTO, 'cast', 'autocast'])) {\n          tf[i].type = 'O';\n          assignField(i + 1, hasAggr, isAuto ? 'autocast' : 'cast');\n          tf[i].type = 'Q';\n        }\n      }\n    }\n  }\n\n  function assignTimeUnitT(i, hasAggr, autoMode, timeUnit) {\n    tf[i].timeUnit = timeUnit;\n    assignField(i+1, hasAggr, autoMode);\n    delete tf[i].timeUnit;\n  }\n\n  function assignT(i, hasAggr, autoMode) {\n    var f = fields[i];\n    tf[i] = {name: f.name, type: f.type};\n\n    // TODO support array of f._timeUnits\n    if (f._timeUnit) {\n      assignTimeUnitT(i, hasAggr, autoMode, f._timeUnit);\n    } else {\n      opt.timeUnitList.forEach(function(timeUnit) {\n        if (timeUnit === undefined) {\n          if (!hasAggr) { // can't aggregate over raw time\n            assignField(i+1, false, autoMode);\n          }\n        } else {\n          assignTimeUnitT(i, hasAggr, autoMode, timeUnit);\n        }\n      });\n    }\n\n    // FIXME what if you aggregate time?\n  }\n\n  function assignField(i, hasAggr, autoMode) {\n    if (i === fields.length) { // If all fields are assigned\n      checkAndPush();\n      return;\n    }\n\n    var f = fields[i];\n    // Otherwise, assign i-th field\n    switch (f.type) {\n      //TODO \"D\", \"G\"\n      case Q:\n        assignQ(i, hasAggr, autoMode);\n        break;\n\n      case T:\n        assignT(i, hasAggr, autoMode);\n        break;\n      case O:\n        /* falls through */\n      case N:\n        /* falls through */\n      default:\n        tf[i] = f;\n        assignField(i + 1, hasAggr, autoMode);\n        break;\n    }\n  }\n\n  var hasAggr = opt.tableTypes === 'aggregated' ? true : opt.tableTypes === 'disaggregated' ? false : null;\n  assignField(0, hasAggr, AUTO);\n\n  return output;\n}\n","'use strict';\n\nvar vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null),\n  genEncs = require('./encs'),\n  getMarktypes = require('./marktypes'),\n  rank = require('../rank/rank'),\n  consts = require('../consts');\n\nmodule.exports = genEncodingsFromFields;\n\nfunction genEncodingsFromFields(output, fields, stats, opt, nested) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.encodings);\n  var encs = genEncs([], fields, stats, opt);\n\n  if (nested) {\n    return encs.reduce(function(dict, enc) {\n      dict[enc] = genEncodingsFromEncs([], enc, stats, opt);\n      return dict;\n    }, {});\n  } else {\n    return encs.reduce(function(list, enc) {\n      return genEncodingsFromEncs(list, enc, stats, opt);\n    }, []);\n  }\n}\n\nfunction genEncodingsFromEncs(output, enc, stats, opt) {\n  getMarktypes(enc, stats, opt)\n    .forEach(function(markType) {\n      var e = vl.duplicate({\n          data: opt.data,\n          marktype: markType,\n          encoding: enc,\n          config: opt.config\n        }),\n        encoding = finalTouch(e, stats, opt),\n        score = rank.encoding(encoding, stats, opt);\n\n      encoding._info = score;\n      output.push(encoding);\n    });\n  return output;\n}\n\n//FIXME this should be refactors\nfunction finalTouch(encoding, stats, opt) {\n  if (encoding.marktype === 'text' && opt.alwaysGenerateTableAsHeatmap) {\n    encoding.encoding.color = encoding.encoding.text;\n  }\n\n  // don't include zero if stdev/avg < 0.01\n  // https://github.com/uwdata/visrec/issues/69\n  var enc = encoding.encoding;\n  ['x', 'y'].forEach(function(et) {\n    var field = enc[et];\n    if (field && vl.field.isMeasure(field) && !vl.field.isCount(field)) {\n      var stat = stats[field.name];\n      if (stat && stat.stdev / stat.avg < 0.01) {\n        field.scale = {zero: false};\n      }\n    }\n  });\n  return encoding;\n}","\"use strict\";\nrequire('../globals');\n\nvar vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null),\n  consts = require('../consts'),\n  genMarkTypes = require('./marktypes'),\n  isDimension = vl.field.isDimension,\n  isMeasure = vl.field.isMeasure;\n\nmodule.exports = genEncs;\n\n// FIXME remove dimension, measure and use information in vega-lite instead!\nvar rules = {\n  x: {\n    dimension: true,\n    measure: true,\n    multiple: true //FIXME should allow multiple only for Q, T\n  },\n  y: {\n    dimension: true,\n    measure: true,\n    multiple: true //FIXME should allow multiple only for Q, T\n  },\n  row: {\n    dimension: true,\n    multiple: true\n  },\n  col: {\n    dimension: true,\n    multiple: true\n  },\n  shape: {\n    dimension: true,\n    rules: shapeRules\n  },\n  size: {\n    measure: true,\n    rules: retinalEncRules\n  },\n  color: {\n    dimension: true,\n    measure: true,\n    rules: colorRules\n  },\n  text: {\n    measure: true\n  },\n  detail: {\n    dimension: true\n  }\n  //geo: {\n  //  geo: true\n  //},\n  //arc: { // pie\n  //\n  //}\n};\n\nfunction retinalEncRules(enc, field, stats, opt) {\n  if (opt.omitMultipleRetinalEncodings) {\n    if (enc.color || enc.size || enc.shape) return false;\n  }\n  return true;\n}\n\nfunction colorRules(enc, field, stats, opt) {\n  if(!retinalEncRules(enc, field, stats, opt)) return false;\n\n  return vl.field.isMeasure(field) ||\n    vl.field.cardinality(field, stats) <= opt.maxCardinalityForColor;\n}\n\nfunction shapeRules(enc, field, stats, opt) {\n  if(!retinalEncRules(enc, field, stats, opt)) return false;\n\n  if (field.bin && field.type === Q) return false;\n  if (field.timeUnit && field.type === T) return false;\n  return vl.field.cardinality(field, stats) <= opt.maxCardinalityForColor;\n}\n\nfunction dimMeaTransposeRule(enc) {\n  // create horizontal histogram for ordinal\n  if (vl.field.isTypes(enc.y, [N, O]) && isMeasure(enc.x)) return true;\n\n  // vertical histogram for Q and T\n  if (isMeasure(enc.y) && (!vl.field.isTypes(enc.x, [N, O]) && isDimension(enc.x))) return true;\n\n  return false;\n}\n\nfunction generalRules(enc, stats, opt) {\n  // enc.text is only used for TEXT TABLE\n  if (enc.text) {\n    return genMarkTypes.satisfyRules(enc, TEXT, stats, opt);\n  }\n\n  // CARTESIAN PLOT OR MAP\n  if (enc.x || enc.y || enc.geo || enc.arc) {\n\n    if (enc.row || enc.col) { //have facet(s)\n\n      // don't use facets before filling up x,y\n      if (!enc.x || !enc.y) return false;\n\n      if (opt.omitNonTextAggrWithAllDimsOnFacets) {\n        // remove all aggregated charts with all dims on facets (row, col)\n        if (genEncs.isAggrWithAllDimOnFacets(enc)) return false;\n      }\n    }\n\n    if (enc.x && enc.y) {\n      var isDimX = !!isDimension(enc.x),\n        isDimY = !!isDimension(enc.y);\n\n      if (isDimX && isDimY && !vl.enc.isAggregate(enc)) {\n        // FIXME actually check if there would be occlusion #90\n        return false;\n      }\n\n      if (opt.omitTranpose) {\n        if (isDimX ^ isDimY) { // dim x mea\n          if (!dimMeaTransposeRule(enc)) return false;\n        } else if (enc.y.type===T || enc.x.type === T) {\n          if (enc.y.type===T && enc.x.type !== T) return false;\n        } else { // show only one OxO, QxQ\n          if (enc.x.name > enc.y.name) return false;\n        }\n      }\n      return true;\n    }\n\n    // DOT PLOTS\n    // // plot with one axis = dot plot\n    if (opt.omitDotPlot) return false;\n\n    // Dot plot should always be horizontal\n    if (opt.omitTranpose && enc.y) return false;\n\n    // dot plot shouldn't have other encoding\n    if (opt.omitDotPlotWithExtraEncoding && vl.keys(enc).length > 1) return false;\n\n    if (opt.omitOneDimensionCount) {\n      // one dimension \"count\"\n    if (enc.x && enc.x.aggregate == 'count' && !enc.y) return false;\n    if (enc.y && enc.y.aggregate == 'count' && !enc.x) return false;\n    }\n\n    return true;\n  }\n  return false;\n}\n\ngenEncs.isAggrWithAllDimOnFacets = function (enc) {\n  var hasAggr = false, hasOtherO = false;\n  for (var encType in enc) {\n    var field = enc[encType];\n    if (field.aggregate) {\n      hasAggr = true;\n    }\n    if (vl.field.isDimension(field) && (encType !== ROW && encType !== COL)) {\n      hasOtherO = true;\n    }\n    if (hasAggr && hasOtherO) break;\n  }\n\n  return hasAggr && !hasOtherO;\n};\n\n\nfunction genEncs(encs, fields, stats, opt) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.encodings);\n  // generate a collection vega-lite's enc\n  var tmpEnc = {};\n\n  function assignField(i) {\n    // If all fields are assigned, save\n    if (i === fields.length) {\n      // at the minimal all chart should have x, y, geo, text or arc\n      if (generalRules(tmpEnc, stats, opt)) {\n        encs.push(vl.duplicate(tmpEnc));\n      }\n      return;\n    }\n\n    // Otherwise, assign i-th field\n    var field = fields[i];\n    for (var j in opt.encodingTypeList) {\n      var et = opt.encodingTypeList[j],\n        isDim = isDimension(field);\n\n      //TODO: support \"multiple\" assignment\n      if (!(et in tmpEnc) && // encoding not used\n        ((isDim && rules[et].dimension) || (!isDim && rules[et].measure)) &&\n        (!rules[et].rules || rules[et].rules(tmpEnc, field, stats, opt))\n      ) {\n        tmpEnc[et] = field;\n        assignField(i + 1);\n        delete tmpEnc[et];\n      }\n    }\n  }\n\n  assignField(0);\n\n  return encs;\n}\n","'use strict';\n\nvar util = require('../util');\n\nvar gen = module.exports = {\n  // data variations\n  aggregates: require('./aggregates'),\n  projections: require('./projections'),\n  // encodings / visual variatons\n  encodings: require('./encodings'),\n  encs: require('./encs'),\n  marktypes: require('./marktypes')\n};\n\ngen.charts = function(fields, opt, cfg, flat) {\n  opt = util.gen.getOpt(opt);\n  flat = flat === undefined ? {encodings: 1} : flat;\n\n  // TODO generate\n\n  // generate permutation of encoding mappings\n  var fieldSets = opt.genAggr ? gen.aggregates([], fields, opt) : [fields],\n    encs, charts, level = 0;\n\n  if (flat === true || (flat && flat.aggregate)) {\n    encs = fieldSets.reduce(function(output, fields) {\n      return gen.encs(output, fields, opt);\n    }, []);\n  } else {\n    encs = fieldSets.map(function(fields) {\n      return gen.encs([], fields, opt);\n    }, true);\n    level += 1;\n  }\n\n  if (flat === true || (flat && flat.encodings)) {\n    charts = util.nestedReduce(encs, function(output, enc) {\n      return gen.marktypes(output, enc, opt, cfg);\n    }, level, true);\n  } else {\n    charts = util.nestedMap(encs, function(enc) {\n      return gen.marktypes([], enc, opt, cfg);\n    }, level, true);\n    level += 1;\n  }\n  return charts;\n};","\"use strict\";\n\nvar vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null),\n  consts = require('../consts'),\n  isDimension = vl.field.isDimension,\n  isOrdinalScale = vl.field.isOrdinalScale;\n\nvar vlmarktypes = module.exports = getMarktypes;\n\nvar marksRule = vlmarktypes.rule = {\n  point:  pointRule,\n  bar:    barRule,\n  line:   lineRule,\n  area:   areaRule, // area is similar to line\n  text:   textRule,\n  tick:   tickRule\n};\n\nfunction getMarktypes(enc, stats, opt) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.encodings);\n\n  var markTypes = opt.marktypeList.filter(function(markType){\n    return vlmarktypes.satisfyRules(enc, markType, stats, opt);\n  });\n\n  return markTypes;\n}\n\nvlmarktypes.satisfyRules = function (enc, markType, stats, opt) {\n  var mark = vl.compiler.marks[markType],\n    reqs = mark.requiredEncoding,\n    support = mark.supportedEncoding;\n\n  for (var i in reqs) { // all required encodings in enc\n    if (!(reqs[i] in enc)) return false;\n  }\n\n  for (var encType in enc) { // all encodings in enc are supported\n    if (!support[encType]) return false;\n  }\n\n  return !marksRule[markType] || marksRule[markType](enc, stats, opt);\n};\n\nfunction facetRule(field, stats, opt) {\n  return vl.field.cardinality(field, stats) <= opt.maxCardinalityForFacets;\n}\n\nfunction facetsRule(enc, stats, opt) {\n  if(enc.row && !facetRule(enc.row, stats, opt)) return false;\n  if(enc.col && !facetRule(enc.col, stats, opt)) return false;\n  return true;\n}\n\nfunction pointRule(enc, stats, opt) {\n  if(!facetsRule(enc, stats, opt)) return false;\n  if (enc.x && enc.y) {\n    // have both x & y ==> scatter plot / bubble plot\n\n    var xIsDim = isDimension(enc.x),\n      yIsDim = isDimension(enc.y);\n\n    // For OxO\n    if (xIsDim && yIsDim) {\n      // shape doesn't work with both x, y as ordinal\n      if (enc.shape) {\n        return false;\n      }\n\n      // TODO(kanitw): check that there is quant at least ...\n      if (enc.color && isDimension(enc.color)) {\n        return false;\n      }\n    }\n\n  } else { // plot with one axis = dot plot\n    if (opt.omitDotPlot) return false;\n\n    // Dot plot should always be horizontal\n    if (opt.omitTranpose && enc.y) return false;\n\n    // dot plot shouldn't have other encoding\n    if (opt.omitDotPlotWithExtraEncoding && vl.keys(enc).length > 1) return false;\n\n    // dot plot with shape is non-sense\n    if (enc.shape) return false;\n  }\n  return true;\n}\n\nfunction tickRule(enc, stats, opt) {\n  // jshint unused:false\n  if (enc.x || enc.y) {\n    if(vl.enc.isAggregate(enc)) return false;\n\n    var xIsDim = isDimension(enc.x),\n      yIsDim = isDimension(enc.y);\n\n    return (!xIsDim && (!enc.y || isOrdinalScale(enc.y))) ||\n      (!yIsDim && (!enc.x || isOrdinalScale(enc.x)));\n  }\n  return false;\n}\n\nfunction barRule(enc, stats, opt) {\n  if(!facetsRule(enc, stats, opt)) return false;\n\n  // bar requires at least x or y\n  if (!enc.x && !enc.y) return false;\n\n  if (opt.omitSizeOnBar && enc.size !== undefined) return false;\n\n  // FIXME actually check if there would be occlusion #90\n  // need to aggregate on either x or y\n  var aggEitherXorY =\n    (!enc.x || enc.x.aggregate === undefined) ^\n    (!enc.y || enc.y.aggregate === undefined);\n\n\n  if (aggEitherXorY) {\n    var eitherXorYisDimOrNull =\n      (!enc.x || isDimension(enc.x)) ^\n      (!enc.y || isDimension(enc.y));\n\n    if (eitherXorYisDimOrNull) {\n      var aggregate = enc.x.aggregate || enc.y.aggregate;\n      return !(opt.omitStackedAverage && aggregate ==='avg' && enc.color);\n    }\n  }\n\n  return false;\n}\n\nfunction lineRule(enc, stats, opt) {\n  if(!facetsRule(enc, stats, opt)) return false;\n\n  // TODO(kanitw): add omitVerticalLine as config\n\n  // FIXME truly ordinal data is fine here too.\n  // Line chart should be only horizontal\n  // and use only temporal data\n  return enc.x.type == 'T' && enc.x.timeUnit && enc.y.type == 'Q' && enc.y.aggregate;\n}\n\nfunction areaRule(enc, stats, opt) {\n  if(!facetsRule(enc, stats, opt)) return false;\n\n  if(!lineRule(enc, stats, opt)) return false;\n\n  return !(opt.omitStackedAverage && enc.y.aggregate ==='avg' && enc.color);\n}\n\nfunction textRule(enc, stats, opt) {\n  // at least must have row or col and aggregated text values\n  return (enc.row || enc.col) && enc.text && enc.text.aggregate && !enc.x && !enc.y && !enc.size &&\n    (!opt.alwaysGenerateTableAsHeatmap || !enc.color);\n}\n","'use strict';\n\nvar util = require('../util'),\n  consts = require('../consts'),\n  vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null),\n  isDimension = vl.field.isDimension;\n\nmodule.exports = projections;\n\n// TODO support other mode of projections generation\n// powerset, chooseK, chooseKorLess are already included in the util\n\n/**\n * fields\n * @param  {[type]} fields array of fields and query information\n * @return {[type]}        [description]\n */\nfunction projections(fields, stats, opt) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.projections);\n\n  // First categorize field, selected, fieldsToAdd, and save indices\n  var selected = [], fieldsToAdd = [], fieldSets = [],\n    hasSelectedDimension = false,\n    hasSelectedMeasure = false,\n    indices = {};\n\n  fields.forEach(function(field, index){\n    //save indices for stable sort later\n    indices[field.name] = index;\n\n    if (field.selected) {\n      selected.push(field);\n      if (isDimension(field) || field.type ==='T') { // FIXME / HACK\n        hasSelectedDimension = true;\n      } else {\n        hasSelectedMeasure = true;\n      }\n    } else if (field.selected !== false && !vl.field.isCount(field)) {\n      if (vl.field.isDimension(field) &&\n          !opt.maxCardinalityForAutoAddOrdinal &&\n          vl.field.cardinality(field, stats, 15) > opt.maxCardinalityForAutoAddOrdinal\n        ) {\n        return;\n      }\n      fieldsToAdd.push(field);\n    }\n  });\n\n  fieldsToAdd.sort(compareFieldsToAdd(hasSelectedDimension, hasSelectedMeasure, indices));\n\n  var setsToAdd = util.chooseKorLess(fieldsToAdd, 1);\n\n  setsToAdd.forEach(function(setToAdd) {\n    var fieldSet = selected.concat(setToAdd);\n    if (fieldSet.length > 0) {\n      if (opt.omitDotPlot && fieldSet.length === 1) return;\n      fieldSets.push(fieldSet);\n    }\n  });\n\n  fieldSets.forEach(function(fieldSet) {\n      // always append projection's key to each projection returned, d3 style.\n    fieldSet.key = projections.key(fieldSet);\n  });\n\n  return fieldSets;\n}\n\nvar typeIsMeasureScore = {\n  N: 0,\n  O: 0,\n  T: 2,\n  Q: 3\n};\n\nfunction compareFieldsToAdd(hasSelectedDimension, hasSelectedMeasure, indices) {\n  return function(a, b){\n    // sort by type of the data\n    if (a.type !== b.type) {\n      if (!hasSelectedDimension) {\n        return typeIsMeasureScore[a.type] - typeIsMeasureScore[b.type];\n      } else { //if (!hasSelectedMeasure) {\n        return typeIsMeasureScore[b.type] - typeIsMeasureScore[a.type];\n      }\n    }\n    //make the sort stable\n    return indices[a.name] - indices[b.name];\n  };\n}\n\nprojections.key = function(projection) {\n  return projection.map(function(field) {\n    return vl.field.isCount(field) ? 'count' : field.name;\n  }).join(',');\n};\n\n","'use strict';\n\nvar g = global || window;\n\nrequire('vega-lite/src/globals');\n\ng.CHART_TYPES = {\n  TABLE: 'TABLE',\n  BAR: 'BAR',\n  PLOT: 'PLOT',\n  LINE: 'LINE',\n  AREA: 'AREA',\n  MAP: 'MAP',\n  HISTOGRAM: 'HISTOGRAM'\n};\n\ng.ANY_DATA_TYPES = (1 << 4) - 1;","module.exports = {\n  encoding: require('./rankEncodings')\n};\n\n\n","'use strict';\n\nrequire('../globals');\n\nvar vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null),\n  isDimension = vl.field.isDimension;\n\nmodule.exports = rankEncodings;\n\n// bad score not specified in the table above\nvar UNUSED_POSITION = 0.5;\n\nvar MARK_SCORE = {\n  line: 0.99,\n  area: 0.98,\n  bar: 0.97,\n  tick: 0.96,\n  point: 0.95,\n  circle: 0.94,\n  square: 0.94,\n  text: 0.8\n};\n\nfunction rankEncodings(encoding, stats, opt, selected) {\n  var features = [],\n    encTypes = vl.keys(encoding.encoding),\n    marktype = encoding.marktype,\n    enc = encoding.encoding;\n\n  var encodingMappingByField = vl.enc.reduce(encoding.encoding, function(o, field, encType) {\n    var key = vl.field.shorthand(field);\n    var mappings = o[key] = o[key] || [];\n    mappings.push({encType: encType, field: field});\n    return o;\n  }, {});\n\n  // data - encoding mapping score\n  vl.forEach(encodingMappingByField, function(mappings) {\n    var reasons = mappings.map(function(m) {\n        return m.encType + vl.shorthand.assign + vl.field.shorthand(m.field) +\n          ' ' + (selected && selected[m.field.name] ? '[x]' : '[ ]');\n      }),\n      scores = mappings.map(function(m) {\n        var role = vl.field.isDimension(m.field) ? 'dimension' : 'measure';\n\n        var score = rankEncodings.score[role](m.field, m.encType, encoding.marktype, stats, opt);\n\n        return !selected || selected[m.field.name] ? score : Math.pow(score, 0.125);\n      });\n\n    features.push({\n      reason: reasons.join(\" | \"),\n      score: Math.max.apply(null, scores)\n    });\n  });\n\n  // plot type\n  if (marktype === TEXT) {\n    // TODO\n  } else {\n    if (enc.x && enc.y) {\n      if (isDimension(enc.x) ^ isDimension(enc.y)) {\n        features.push({\n          reason: 'OxQ plot',\n          score: 0.8\n        });\n      }\n    }\n  }\n\n  // penalize not using positional only penalize for non-text\n  if (encTypes.length > 1 && marktype !== TEXT) {\n    if ((!enc.x || !enc.y) && !enc.geo && !enc.text) {\n      features.push({\n        reason: 'unused position',\n        score: UNUSED_POSITION\n      });\n    }\n  }\n\n  // mark type score\n  features.push({\n    reason: 'marktype='+marktype,\n    score: MARK_SCORE[marktype]\n  });\n\n  return {\n    score: features.reduce(function(p, f) {\n      return p * f.score;\n    }, 1),\n    features: features\n  };\n}\n\n\nvar D = {}, M = {}, BAD = 0.1, TERRIBLE = 0.01;\n\nD.minor = 0.01;\nD.pos = 1;\nD.Y_T = 0.8;\nD.facet_text = 1;\nD.facet_good = 0.675; // < color_ok, > color_bad\nD.facet_ok = 0.55;\nD.facet_bad = 0.4;\nD.color_good = 0.7;\nD.color_ok = 0.65; // > M.Size\nD.color_bad = 0.3;\nD.color_stack = 0.6;\nD.shape = 0.6;\nD.detail = 0.5;\nD.bad = BAD;\nD.terrible = TERRIBLE;\n\nM.pos = 1;\nM.size = 0.6;\nM.color = 0.5;\nM.text = 0.4;\nM.bad = BAD;\nM.terrible = TERRIBLE;\n\nrankEncodings.dimensionScore = function (field, encType, marktype, stats, opt){\n  var cardinality = vl.field.cardinality(field, stats);\n  switch (encType) {\n    case X:\n      if (vl.field.isTypes(field, [N, O]))  return D.pos - D.minor;\n      return D.pos;\n\n    case Y:\n      if (vl.field.isTypes(field, [N, O])) return D.pos - D.minor; //prefer ordinal on y\n      if(field.type === T) return D.Y_T; // time should not be on Y\n      return D.pos - D.minor;\n\n    case COL:\n      if (marktype === TEXT) return D.facet_text;\n      //prefer column over row due to scrolling issues\n      return cardinality <= opt.maxGoodCardinalityForFacets ? D.facet_good :\n        cardinality <= opt.maxCardinalityForFacets ? D.facet_ok : D.facet_bad;\n\n    case ROW:\n      if (marktype === TEXT) return D.facet_text;\n      return (cardinality <= opt.maxGoodCardinalityForFacets ? D.facet_good :\n        cardinality <= opt.maxCardinalityForFacets ? D.facet_ok : D.facet_bad) - D.minor;\n\n    case COLOR:\n      var hasOrder = (field.bin && field.type===Q) || (field.timeUnit && field.type===T);\n\n      //FIXME add stacking option once we have control ..\n      var isStacked = marktype === 'bar' || marktype === 'area';\n\n      // true ordinal on color is currently BAD (until we have good ordinal color scale support)\n      if (hasOrder) return D.color_bad;\n\n      //stacking gets lower score\n      if (isStacked) return D.color_stack;\n\n      return cardinality <= opt.maxGoodCardinalityForColor ? D.color_good: cardinality <= opt.maxCardinalityForColor ? D.color_ok : D.color_bad;\n    case SHAPE:\n      return cardinality <= opt.maxCardinalityForShape ? D.shape : TERRIBLE;\n    case DETAIL:\n      return D.detail;\n  }\n  return TERRIBLE;\n};\n\nrankEncodings.dimensionScore.consts = D;\n\nrankEncodings.measureScore = function (field, encType, marktype, stats, opt) {\n  // jshint unused:false\n  switch (encType){\n    case X: return M.pos;\n    case Y: return M.pos;\n    case SIZE:\n      if (marktype === 'bar') return BAD; //size of bar is very bad\n      if (marktype === TEXT) return BAD;\n      if (marktype === 'line') return BAD;\n      return M.size;\n    case COLOR: return M.color;\n    case TEXT: return M.text;\n  }\n  return BAD;\n};\n\nrankEncodings.measureScore.consts = M;\n\n\nrankEncodings.score = {\n  dimension: rankEncodings.dimensionScore,\n  measure: rankEncodings.measureScore,\n};\n","\"use strict\";\n\nvar consts = require('./consts');\n\nvar util = module.exports = {\n  gen: {}\n};\n\nutil.isArray = Array.isArray || function (obj) {\n  return {}.toString.call(obj) == '[object Array]';\n};\n\nutil.json = function(s, sp) {\n  return JSON.stringify(s, null, sp);\n};\n\nutil.keys = function(obj) {\n  var k = [], x;\n  for (x in obj) k.push(x);\n  return k;\n};\n\nutil.nestedMap = function (col, f, level, filter) {\n  return level === 0 ?\n    col.map(f) :\n    col.map(function(v) {\n      var r = util.nestedMap(v, f, level - 1);\n      return filter ? r.filter(util.nonEmpty) : r;\n    });\n};\n\nutil.nestedReduce = function (col, f, level, filter) {\n  return level === 0 ?\n    col.reduce(f, []) :\n    col.map(function(v) {\n      var r = util.nestedReduce(v, f, level - 1);\n      return filter ? r.filter(util.nonEmpty) : r;\n    });\n};\n\nutil.nonEmpty = function(grp) {\n  return !util.isArray(grp) || grp.length > 0;\n};\n\n\nutil.traverse = function (node, arr) {\n  if (node.value !== undefined) {\n    arr.push(node.value);\n  } else {\n    if (node.left) util.traverse(node.left, arr);\n    if (node.right) util.traverse(node.right, arr);\n  }\n  return arr;\n};\n\nutil.union = function (a, b) {\n  var o = {};\n  a.forEach(function(x) { o[x] = true;});\n  b.forEach(function(x) { o[x] = true;});\n  return util.keys(o);\n};\n\n\nutil.gen.getOpt = function (opt) {\n  //merge with default\n  return (opt ? util.keys(opt) : []).reduce(function(c, k) {\n    c[k] = opt[k];\n    return c;\n  }, Object.create(consts.gen.DEFAULT_OPT));\n};\n\n/**\n * powerset code from http://rosettacode.org/wiki/Power_Set#JavaScript\n *\n *   var res = powerset([1,2,3,4]);\n *\n * returns\n *\n * [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],\n * [2,4],[1,2,4],[3,4],[1,3,4],[2,3,4],[1,2,3,4]]\n[edit]\n*/\n\nutil.powerset = function(list) {\n  var ps = [\n    []\n  ];\n  for (var i = 0; i < list.length; i++) {\n    for (var j = 0, len = ps.length; j < len; j++) {\n      ps.push(ps[j].concat(list[i]));\n    }\n  }\n  return ps;\n};\n\nutil.chooseKorLess = function(list, k) {\n  var subset = [[]];\n  for (var i = 0; i < list.length; i++) {\n    for (var j = 0, len = subset.length; j < len; j++) {\n      var sub = subset[j].concat(list[i]);\n      if(sub.length <= k){\n        subset.push(sub);\n      }\n    }\n  }\n  return subset;\n};\n\nutil.chooseK = function(list, k) {\n  var subset = [[]];\n  var kArray =[];\n  for (var i = 0; i < list.length; i++) {\n    for (var j = 0, len = subset.length; j < len; j++) {\n      var sub = subset[j].concat(list[i]);\n      if(sub.length < k){\n        subset.push(sub);\n      }else if (sub.length === k){\n        kArray.push(sub);\n      }\n    }\n  }\n  return kArray;\n};\n\nutil.cross = function(a,b){\n  var x = [];\n  for(var i=0; i< a.length; i++){\n    for(var j=0;j< b.length; j++){\n      x.push(a[i].concat(b[j]));\n    }\n  }\n  return x;\n};\n\n","'use strict';\n\n// declare global constant\nvar g = global || window;\n\ng.TABLE = 'table';\ng.RAW = 'raw';\ng.STACKED = 'stacked';\ng.INDEX = 'index';\n\ng.X = 'x';\ng.Y = 'y';\ng.ROW = 'row';\ng.COL = 'col';\ng.SIZE = 'size';\ng.SHAPE = 'shape';\ng.COLOR = 'color';\ng.TEXT = 'text';\ng.DETAIL = 'detail';\n\ng.N = 'N';\ng.O = 'O';\ng.Q = 'Q';\ng.T = 'T';\n"],"sourceRoot":"/source/"}